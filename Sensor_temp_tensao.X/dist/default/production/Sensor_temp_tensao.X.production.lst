

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Aug 04 17:12:40 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           	psect	smallconst
    35  000800                     __psmallconst:
    36                           	opt stack 0
    37  000800  00                 	db	0
    38  000801                     _dpowers:
    39                           	opt stack 0
    40  000801  0001               	dw	1
    41  000803  000A               	dw	10
    42  000805  0064               	dw	100
    43  000807  03E8               	dw	1000
    44  000809  2710               	dw	10000
    45  00080B                     __end_of_dpowers:
    46                           	opt stack 0
    47  0000                     _ADCON0	set	4034
    48  0000                     _ADCON1	set	4033
    49  0000                     _ADCON2	set	4032
    50  0000                     _RCSTA	set	4011
    51  0000                     _SPBRG	set	4015
    52  0000                     _TRISAbits	set	3986
    53  0000                     _TRISCbits	set	3988
    54  0000                     _TXREG	set	4013
    55  0000                     _TXSTA	set	4012
    56  0000                     _ADRES	set	4035
    57  0000                     _BRG16	set	32195
    58  0000                     _GIEH	set	32663
    59  0000                     _GO_DONE	set	32273
    60  0000                     _IPEN	set	32391
    61  0000                     _IRCF0	set	32412
    62  0000                     _IRCF1	set	32413
    63  0000                     _IRCF2	set	32414
    64  0000                     _RCIE	set	31981
    65  0000                     _RCIP	set	31997
    66  0000                     _TXIF	set	31988
    67  00080B                     STR_1:
    68  00080B  25                 	db	37
    69  00080C  64                 	db	100	;'d'
    70  00080D  00                 	db	0
    71  0000                     
    72                           ; #config settings
    73  00080E  00                 	db	0	; dummy byte at the end
    74  0000                     
    75                           	psect	cinit
    76  0013F8                     __pcinit:
    77                           	opt stack 0
    78  0013F8                     start_initialization:
    79                           	opt stack 0
    80  0013F8                     __initialization:
    81                           	opt stack 0
    82                           
    83                           ; Clear objects allocated to COMRAM (2 bytes)
    84  0013F8  6A5E               	clrf	(__pbssCOMRAM+1)& (0+255),c
    85  0013FA  6A5D               	clrf	__pbssCOMRAM& (0+255),c
    86  0013FC                     end_of_initialization:
    87                           	opt stack 0
    88  0013FC                     __end_of__initialization:
    89                           	opt stack 0
    90  0013FC  0E00               	movlw	low (__Lmediumconst shr (0+16))
    91  0013FE  6EF8               	movwf	tblptru,c
    92  001400  0100               	movlb	0
    93  001402  EF9B  F009         	goto	_main	;jump to C main() function
    94                           tblptru	equ	0xFF8
    95                           
    96                           	psect	bssCOMRAM
    97  00005D                     __pbssCOMRAM:
    98                           	opt stack 0
    99  00005D                     _errno:
   100                           	opt stack 0
   101  00005D                     	ds	2
   102                           tblptru	equ	0xFF8
   103                           
   104                           	psect	cstackCOMRAM
   105  000001                     __pcstackCOMRAM:
   106                           	opt stack 0
   107  000001                     ?___wmul:
   108                           	opt stack 0
   109  000001                     ?___ftpack:
   110                           	opt stack 0
   111  000001                     tx_data@data:
   112                           	opt stack 0
   113  000001                     Delay@j:
   114                           	opt stack 0
   115  000001                     ___wmul@multiplier:
   116                           	opt stack 0
   117  000001                     ___ftpack@arg:
   118                           	opt stack 0
   119  000001                     frexp@value:
   120                           	opt stack 0
   121                           
   122                           ; 3 bytes @ 0x0
   123  000001                     	ds	2
   124  000003                     ___wmul@multiplicand:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x2
   128  000003                     	ds	1
   129  000004                     ___ftpack@exp:
   130                           	opt stack 0
   131  000004                     frexp@eptr:
   132                           	opt stack 0
   133                           
   134                           ; 2 bytes @ 0x3
   135  000004                     	ds	1
   136  000005                     ___ftpack@sign:
   137                           	opt stack 0
   138  000005                     ___wmul@product:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0x4
   142  000005                     	ds	1
   143  000006                     ??___ftpack:
   144  000006                     ??_frexp:
   145                           
   146                           ; 1 bytes @ 0x5
   147  000006                     	ds	1
   148  000007                     ?___lwdiv:
   149                           	opt stack 0
   150  000007                     ___lwdiv@dividend:
   151                           	opt stack 0
   152                           
   153                           ; 2 bytes @ 0x6
   154  000007                     	ds	2
   155  000009                     ?___ftmul:
   156                           	opt stack 0
   157  000009                     ?___lwtoft:
   158                           	opt stack 0
   159  000009                     ___lwdiv@divisor:
   160                           	opt stack 0
   161  000009                     ___lwtoft@c:
   162                           	opt stack 0
   163  000009                     ___ftmul@f1:
   164                           	opt stack 0
   165                           
   166                           ; 3 bytes @ 0x8
   167  000009                     	ds	2
   168  00000B                     ___lwdiv@quotient:
   169                           	opt stack 0
   170                           
   171                           ; 2 bytes @ 0xA
   172  00000B                     	ds	1
   173  00000C                     ?___ftdiv:
   174                           	opt stack 0
   175  00000C                     ___ftdiv@f1:
   176                           	opt stack 0
   177  00000C                     ___ftmul@f2:
   178                           	opt stack 0
   179                           
   180                           ; 3 bytes @ 0xB
   181  00000C                     	ds	1
   182  00000D                     ___lwdiv@counter:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0xC
   186  00000D                     	ds	1
   187  00000E                     ?___lwmod:
   188                           	opt stack 0
   189  00000E                     ___lwmod@dividend:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0xD
   193  00000E                     	ds	1
   194  00000F                     ??___ftmul:
   195  00000F                     ___ftdiv@f2:
   196                           	opt stack 0
   197                           
   198                           ; 3 bytes @ 0xE
   199  00000F                     	ds	1
   200  000010                     ___lwmod@divisor:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0xF
   204  000010                     	ds	2
   205  000012                     ??___ftdiv:
   206  000012                     ___ftmul@exp:
   207                           	opt stack 0
   208  000012                     ___lwmod@counter:
   209                           	opt stack 0
   210                           
   211                           ; 1 bytes @ 0x11
   212  000012                     	ds	1
   213  000013                     ?_sprintf:
   214                           	opt stack 0
   215  000013                     sprintf@sp:
   216                           	opt stack 0
   217  000013                     ___ftmul@f3_as_product:
   218                           	opt stack 0
   219                           
   220                           ; 3 bytes @ 0x12
   221  000013                     	ds	2
   222  000015                     ___ftdiv@cntr:
   223                           	opt stack 0
   224  000015                     sprintf@f:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x14
   228  000015                     	ds	1
   229  000016                     ___ftmul@cntr:
   230                           	opt stack 0
   231  000016                     ___ftdiv@f3:
   232                           	opt stack 0
   233                           
   234                           ; 3 bytes @ 0x15
   235  000016                     	ds	1
   236  000017                     ___ftmul@sign:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x16
   240  000017                     	ds	1
   241  000018                     ?___ftneg:
   242                           	opt stack 0
   243  000018                     ___ftneg@f1:
   244                           	opt stack 0
   245                           
   246                           ; 3 bytes @ 0x17
   247  000018                     	ds	1
   248  000019                     ??_sprintf:
   249  000019                     ___ftdiv@exp:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x18
   253  000019                     	ds	1
   254  00001A                     ___ftdiv@sign:
   255                           	opt stack 0
   256  00001A                     sprintf@ap:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x19
   260  00001A                     	ds	1
   261  00001B                     ?___ftadd:
   262                           	opt stack 0
   263  00001B                     ?___fttol:
   264                           	opt stack 0
   265  00001B                     ___ftadd@f1:
   266                           	opt stack 0
   267  00001B                     ___fttol@f1:
   268                           	opt stack 0
   269                           
   270                           ; 3 bytes @ 0x1A
   271  00001B                     	ds	1
   272  00001C                     sprintf@flag:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x1B
   276  00001C                     	ds	1
   277  00001D                     sprintf@prec:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0x1C
   281  00001D                     	ds	1
   282  00001E                     sprintf@val:
   283                           	opt stack 0
   284  00001E                     ___ftadd@f2:
   285                           	opt stack 0
   286                           
   287                           ; 3 bytes @ 0x1D
   288  00001E                     	ds	1
   289  00001F                     ??___fttol:
   290                           
   291                           ; 1 bytes @ 0x1E
   292  00001F                     	ds	1
   293  000020                     sprintf@c:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x1F
   297  000020                     	ds	1
   298  000021                     ??___ftadd:
   299                           
   300                           ; 1 bytes @ 0x20
   301  000021                     	ds	3
   302  000024                     ___ftadd@sign:
   303                           	opt stack 0
   304  000024                     ___fttol@sign1:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x23
   308  000024                     	ds	1
   309  000025                     ___ftadd@exp2:
   310                           	opt stack 0
   311  000025                     ___fttol@lval:
   312                           	opt stack 0
   313                           
   314                           ; 4 bytes @ 0x24
   315  000025                     	ds	1
   316  000026                     ___ftadd@exp1:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x25
   320  000026                     	ds	3
   321  000029                     ___fttol@exp1:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x28
   325  000029                     	ds	1
   326  00002A                     ?___altoft:
   327                           	opt stack 0
   328  00002A                     ___altoft@c:
   329                           	opt stack 0
   330                           
   331                           ; 4 bytes @ 0x29
   332  00002A                     	ds	4
   333  00002E                     ??___altoft:
   334                           
   335                           ; 1 bytes @ 0x2D
   336  00002E                     	ds	4
   337  000032                     ___altoft@exp:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x31
   341  000032                     	ds	1
   342  000033                     ___altoft@sign:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x32
   346  000033                     	ds	1
   347  000034                     ?_trunc:
   348                           	opt stack 0
   349  000034                     trunc@x:
   350                           	opt stack 0
   351                           
   352                           ; 3 bytes @ 0x33
   353  000034                     	ds	3
   354  000037                     trunc@i:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0x36
   358  000037                     	ds	3
   359  00003A                     trunc@expon:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x39
   363  00003A                     	ds	2
   364  00003C                     ?_fmod:
   365                           	opt stack 0
   366  00003C                     fmod@x:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0x3B
   370  00003C                     	ds	3
   371  00003F                     fmod@y:
   372                           	opt stack 0
   373                           
   374                           ; 3 bytes @ 0x3E
   375  00003F                     	ds	3
   376  000042                     fmod@n:
   377                           	opt stack 0
   378                           
   379                           ; 3 bytes @ 0x41
   380  000042                     	ds	3
   381  000045                     _adc_output$764:
   382                           	opt stack 0
   383                           
   384                           ; 3 bytes @ 0x44
   385  000045                     	ds	3
   386  000048                     adc_output@valor:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x47
   390  000048                     	ds	2
   391  00004A                     adc_output@tensao:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x49
   395  00004A                     	ds	2
   396  00004C                     adc_output@va3:
   397                           	opt stack 0
   398                           
   399                           ; 5 bytes @ 0x4B
   400  00004C                     	ds	5
   401  000051                     adc_output@va4:
   402                           	opt stack 0
   403                           
   404                           ; 5 bytes @ 0x50
   405  000051                     	ds	5
   406  000056                     adc_output@va3_134:
   407                           	opt stack 0
   408                           
   409                           ; 5 bytes @ 0x55
   410  000056                     	ds	5
   411  00005B                     adc_output@ponto:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x5A
   415  00005B                     	ds	2
   416  00005D                     tblptru	equ	0xFF8
   417                           
   418                           ; 1 bytes @ 0x5C
   419 ;;
   420 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   421 ;;
   422 ;; *************** function _main *****************
   423 ;; Defined at:
   424 ;;		line 128 in file "main.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   438 ;;      Params:         0       0       0       0       0       0       0       0       0
   439 ;;      Locals:         0       0       0       0       0       0       0       0       0
   440 ;;      Temps:          0       0       0       0       0       0       0       0       0
   441 ;;      Totals:         0       0       0       0       0       0       0       0       0
   442 ;;Total ram usage:        0 bytes
   443 ;; Hardware stack levels required when called:    5
   444 ;; This function calls:
   445 ;;		_adc_output
   446 ;;		_adc_setup
   447 ;;		_serial_setup
   448 ;;		_swap_channel
   449 ;; This function is called by:
   450 ;;		Startup code after reset
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           	psect	text0
   455  001336                     __ptext0:
   456                           	opt stack 0
   457  001336                     _main:
   458                           	opt stack 26
   459                           
   460                           ;main.c: 130: TRISAbits.TRISA0 = 1;
   461                           
   462                           ;incstack = 0
   463  001336  8092               	bsf	3986,0,c	;volatile
   464                           
   465                           ;main.c: 131: TRISAbits.TRISA1 = 1;
   466  001338  8292               	bsf	3986,1,c	;volatile
   467                           
   468                           ;main.c: 132: IRCF2 = 1; IRCF1 = 1; IRCF0 = 0;
   469  00133A  8CD3               	bsf	4051,6,c	;volatile
   470  00133C  8AD3               	bsf	4051,5,c	;volatile
   471  00133E  98D3               	bcf	4051,4,c	;volatile
   472                           
   473                           ;main.c: 134: GO_DONE = 0;
   474  001340  92C2               	bcf	4034,1,c	;volatile
   475                           
   476                           ;main.c: 135: serial_setup();
   477  001342  ECE5  F009         	call	_serial_setup	;wreg free
   478                           
   479                           ;main.c: 136: adc_setup();
   480  001346  EC03  F00A         	call	_adc_setup	;wreg free
   481  00134A                     l1788:
   482                           
   483                           ;main.c: 140: GO_DONE = 1;
   484  00134A  82C2               	bsf	4034,1,c	;volatile
   485                           
   486                           ;main.c: 141: GO_DONE = 1;
   487  00134C  82C2               	bsf	4034,1,c	;volatile
   488  00134E                     l77:
   489  00134E  B2C2               	btfsc	4034,1,c	;volatile
   490  001350  D7FE               	goto	l77
   491                           
   492                           ;main.c: 144: adc_output();
   493  001352  EC08  F004         	call	_adc_output	;wreg free
   494                           
   495                           ;main.c: 145: swap_channel();
   496  001356  ECF3  F009         	call	_swap_channel	;wreg free
   497  00135A  D7F7               	goto	l1788
   498  00135C                     __end_of_main:
   499                           	opt stack 0
   500                           tblptru	equ	0xFF8
   501                           
   502 ;; *************** function _swap_channel *****************
   503 ;; Defined at:
   504 ;;		line 94 in file "main.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, status,2, status,0
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   518 ;;      Params:         0       0       0       0       0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0       0       0       0       0
   520 ;;      Temps:          0       0       0       0       0       0       0       0       0
   521 ;;      Totals:         0       0       0       0       0       0       0       0       0
   522 ;;Total ram usage:        0 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; This function calls:
   525 ;;		Nothing
   526 ;; This function is called by:
   527 ;;		_main
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           	psect	text1
   532  0013E6                     __ptext1:
   533                           	opt stack 0
   534  0013E6                     _swap_channel:
   535                           	opt stack 30
   536                           
   537                           ;main.c: 96: if (ADCON0 == 0b001){
   538                           
   539                           ;incstack = 0
   540  0013E6  04C2               	decf	4034,w,c	;volatile
   541  0013E8  A4D8               	btfss	status,2,c
   542  0013EA  D003               	goto	l1258
   543                           
   544                           ;main.c: 97: ADCON0 = 0b101;
   545  0013EC  0E05               	movlw	5
   546  0013EE  6EC2               	movwf	4034,c	;volatile
   547                           
   548                           ;main.c: 98: }
   549  0013F0  0012               	return	
   550  0013F2                     l1258:
   551                           
   552                           ;main.c: 99: else{
   553                           ;main.c: 100: ADCON0 = 0b001;
   554  0013F2  0E01               	movlw	1
   555  0013F4  6EC2               	movwf	4034,c	;volatile
   556  0013F6  0012               	return	
   557  0013F8                     __end_of_swap_channel:
   558                           	opt stack 0
   559                           tblptru	equ	0xFF8
   560                           status	equ	0xFD8
   561                           
   562 ;; *************** function _serial_setup *****************
   563 ;; Defined at:
   564 ;;		line 105 in file "main.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;		None
   567 ;; Auto vars:     Size  Location     Type
   568 ;;		None
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, status,2
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   578 ;;      Params:         0       0       0       0       0       0       0       0       0
   579 ;;      Locals:         0       0       0       0       0       0       0       0       0
   580 ;;      Temps:          0       0       0       0       0       0       0       0       0
   581 ;;      Totals:         0       0       0       0       0       0       0       0       0
   582 ;;Total ram usage:        0 bytes
   583 ;; Hardware stack levels used:    1
   584 ;; This function calls:
   585 ;;		Nothing
   586 ;; This function is called by:
   587 ;;		_main
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           	psect	text2
   592  0013CA                     __ptext2:
   593                           	opt stack 0
   594  0013CA                     _serial_setup:
   595                           	opt stack 30
   596                           
   597                           ;main.c: 107: TRISCbits.TRISC6 = 0;
   598                           
   599                           ;incstack = 0
   600  0013CA  9C94               	bcf	3988,6,c	;volatile
   601                           
   602                           ;main.c: 109: TRISCbits.TRISC7 = 1;
   603  0013CC  8E94               	bsf	3988,7,c	;volatile
   604                           
   605                           ;main.c: 111: TXSTA = 0x24;
   606  0013CE  0E24               	movlw	36
   607  0013D0  6EAC               	movwf	4012,c	;volatile
   608                           
   609                           ;main.c: 113: RCSTA = 0x90;
   610  0013D2  0E90               	movlw	144
   611  0013D4  6EAB               	movwf	4011,c	;volatile
   612                           
   613                           ;main.c: 115: BRG16 = 1;
   614  0013D6  86B8               	bsf	4024,3,c	;volatile
   615                           
   616                           ;main.c: 117: SPBRG = 0x67;
   617  0013D8  0E67               	movlw	103
   618  0013DA  6EAF               	movwf	4015,c	;volatile
   619                           
   620                           ;main.c: 119: IPEN = 1;
   621  0013DC  8ED0               	bsf	4048,7,c	;volatile
   622                           
   623                           ;main.c: 121: GIEH = 1;
   624  0013DE  8EF2               	bsf	intcon,7,c	;volatile
   625                           
   626                           ;main.c: 123: RCIE = 1;
   627  0013E0  8A9D               	bsf	3997,5,c	;volatile
   628                           
   629                           ;main.c: 125: RCIP = 1;
   630  0013E2  8A9F               	bsf	3999,5,c	;volatile
   631  0013E4  0012               	return		;funcret
   632  0013E6                     __end_of_serial_setup:
   633                           	opt stack 0
   634                           tblptru	equ	0xFF8
   635                           intcon	equ	0xFF2
   636                           status	equ	0xFD8
   637                           
   638 ;; *************** function _adc_setup *****************
   639 ;; Defined at:
   640 ;;		line 40 in file "main.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;		None
   643 ;; Auto vars:     Size  Location     Type
   644 ;;		None
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      void 
   647 ;; Registers used:
   648 ;;		wreg, status,2
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   654 ;;      Params:         0       0       0       0       0       0       0       0       0
   655 ;;      Locals:         0       0       0       0       0       0       0       0       0
   656 ;;      Temps:          0       0       0       0       0       0       0       0       0
   657 ;;      Totals:         0       0       0       0       0       0       0       0       0
   658 ;;Total ram usage:        0 bytes
   659 ;; Hardware stack levels used:    1
   660 ;; This function calls:
   661 ;;		Nothing
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           	psect	text3
   668  001406                     __ptext3:
   669                           	opt stack 0
   670  001406                     _adc_setup:
   671                           	opt stack 30
   672                           
   673                           ;main.c: 42: ADCON2 = 0x95;
   674                           
   675                           ;incstack = 0
   676  001406  0E95               	movlw	149
   677  001408  6EC0               	movwf	4032,c	;volatile
   678                           
   679                           ;main.c: 44: ADCON1 = 0b1101;
   680  00140A  0E0D               	movlw	13
   681  00140C  6EC1               	movwf	4033,c	;volatile
   682                           
   683                           ;main.c: 46: ADCON0 = 0b001;
   684  00140E  0E01               	movlw	1
   685  001410  6EC2               	movwf	4034,c	;volatile
   686  001412  0012               	return		;funcret
   687  001414                     __end_of_adc_setup:
   688                           	opt stack 0
   689                           tblptru	equ	0xFF8
   690                           intcon	equ	0xFF2
   691                           status	equ	0xFD8
   692                           
   693 ;; *************** function _adc_output *****************
   694 ;; Defined at:
   695 ;;		line 50 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  va3             5   85[COMRAM] unsigned char [5]
   700 ;;  tensao          2   73[COMRAM] int 
   701 ;;  va4             5   80[COMRAM] unsigned char [5]
   702 ;;  va3             5   75[COMRAM] unsigned char [5]
   703 ;;  ponto           2   90[COMRAM] int 
   704 ;;  valor           2   71[COMRAM] int 
   705 ;; Return value:  Size  Location     Type
   706 ;;                  1    wreg      void 
   707 ;; Registers used:
   708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   714 ;;      Params:         0       0       0       0       0       0       0       0       0
   715 ;;      Locals:        24       0       0       0       0       0       0       0       0
   716 ;;      Temps:          0       0       0       0       0       0       0       0       0
   717 ;;      Totals:        24       0       0       0       0       0       0       0       0
   718 ;;Total ram usage:       24 bytes
   719 ;; Hardware stack levels used:    1
   720 ;; Hardware stack levels required when called:    4
   721 ;; This function calls:
   722 ;;		_Delay
   723 ;;		___ftdiv
   724 ;;		___fttol
   725 ;;		___lwdiv
   726 ;;		___lwtoft
   727 ;;		___wmul
   728 ;;		_fmod
   729 ;;		_sprintf
   730 ;;		_tx_data
   731 ;; This function is called by:
   732 ;;		_main
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text4
   737  000810                     __ptext4:
   738                           	opt stack 0
   739  000810                     _adc_output:
   740                           	opt stack 26
   741                           
   742                           ;main.c: 53: if (ADCON0 == 0b001){
   743                           
   744                           ;incstack = 0
   745  000810  04C2               	decf	4034,w,c	;volatile
   746  000812  A4D8               	btfss	status,2,c
   747  000814  D0B3               	goto	l1764
   748                           
   749                           ;main.c: 54: char va3[5],va4[5];
   750                           ;main.c: 55: int valor = (ADRES * 5)/10.24;
   751  000816  0ED7               	movlw	215
   752  000818  6E0F               	movwf	___ftdiv@f2,c
   753  00081A  0E23               	movlw	35
   754  00081C  6E10               	movwf	___ftdiv@f2+1,c
   755  00081E  0E41               	movlw	65
   756  000820  6E11               	movwf	___ftdiv@f2+2,c
   757  000822  CFC3 F001          	movff	4035,___wmul@multiplier	;volatile
   758  000826  CFC4 F002          	movff	4036,___wmul@multiplier+1	;volatile
   759  00082A  0E00               	movlw	0
   760  00082C  6E04               	movwf	___wmul@multiplicand+1,c
   761  00082E  0E05               	movlw	5
   762  000830  6E03               	movwf	___wmul@multiplicand,c
   763  000832  ECAE  F009         	call	___wmul	;wreg free
   764  000836  C001  F009         	movff	?___wmul,___lwtoft@c
   765  00083A  C002  F00A         	movff	?___wmul+1,___lwtoft@c+1
   766  00083E  ECD3  F009         	call	___lwtoft	;wreg free
   767  000842  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
   768  000846  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
   769  00084A  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
   770  00084E  EC69  F007         	call	___ftdiv	;wreg free
   771  000852  C00C  F01B         	movff	?___ftdiv,___fttol@f1
   772  000856  C00D  F01C         	movff	?___ftdiv+1,___fttol@f1+1
   773  00085A  C00E  F01D         	movff	?___ftdiv+2,___fttol@f1+2
   774  00085E  EC75  F006         	call	___fttol	;wreg free
   775  000862  C01B  F048         	movff	?___fttol,adc_output@valor
   776  000866  C01C  F049         	movff	?___fttol+1,adc_output@valor+1
   777                           
   778                           ;main.c: 56: int ponto = fmod((ADRES * 5), 10.24);
   779  00086A  0ED7               	movlw	215
   780  00086C  6E3F               	movwf	fmod@y,c
   781  00086E  0E23               	movlw	35
   782  000870  6E40               	movwf	fmod@y+1,c
   783  000872  0E41               	movlw	65
   784  000874  6E41               	movwf	fmod@y+2,c
   785  000876  CFC3 F001          	movff	4035,___wmul@multiplier	;volatile
   786  00087A  CFC4 F002          	movff	4036,___wmul@multiplier+1	;volatile
   787  00087E  0E00               	movlw	0
   788  000880  6E04               	movwf	___wmul@multiplicand+1,c
   789  000882  0E05               	movlw	5
   790  000884  6E03               	movwf	___wmul@multiplicand,c
   791  000886  ECAE  F009         	call	___wmul	;wreg free
   792  00088A  C001  F009         	movff	?___wmul,___lwtoft@c
   793  00088E  C002  F00A         	movff	?___wmul+1,___lwtoft@c+1
   794  000892  ECD3  F009         	call	___lwtoft	;wreg free
   795  000896  C009  F03C         	movff	?___lwtoft,fmod@x
   796  00089A  C00A  F03D         	movff	?___lwtoft+1,fmod@x+1
   797  00089E  C00B  F03E         	movff	?___lwtoft+2,fmod@x+2
   798  0008A2  EC33  F008         	call	_fmod	;wreg free
   799  0008A6  C03C  F045         	movff	?_fmod,_adc_output$764
   800  0008AA  C03D  F046         	movff	?_fmod+1,_adc_output$764+1
   801  0008AE  C03E  F047         	movff	?_fmod+2,_adc_output$764+2
   802                           
   803                           ;main.c: 56: int ponto = fmod((ADRES * 5), 10.24);
   804  0008B2  C045  F01B         	movff	_adc_output$764,___fttol@f1
   805  0008B6  C046  F01C         	movff	_adc_output$764+1,___fttol@f1+1
   806  0008BA  C047  F01D         	movff	_adc_output$764+2,___fttol@f1+2
   807  0008BE  EC75  F006         	call	___fttol	;wreg free
   808  0008C2  C01B  F05B         	movff	?___fttol,adc_output@ponto
   809  0008C6  C01C  F05C         	movff	?___fttol+1,adc_output@ponto+1
   810                           
   811                           ;main.c: 57: if(ponto>3){ponto =5;}
   812  0008CA  BE5C               	btfsc	adc_output@ponto+1,7,c
   813  0008CC  D00A               	goto	l1728
   814  0008CE  505C               	movf	adc_output@ponto+1,w,c
   815  0008D0  E104               	bnz	u1500
   816  0008D2  0E04               	movlw	4
   817  0008D4  5C5B               	subwf	adc_output@ponto,w,c
   818  0008D6  A0D8               	btfss	status,0,c
   819  0008D8  D004               	goto	l1728
   820  0008DA                     u1500:
   821  0008DA  0E00               	movlw	0
   822  0008DC  6E5C               	movwf	adc_output@ponto+1,c
   823  0008DE  0E05               	movlw	5
   824  0008E0  D003               	goto	L1
   825  0008E2                     l1728:
   826                           
   827                           ;main.c: 58: else{ponto = 0;}
   828  0008E2  0E00               	movlw	0
   829  0008E4  6E5C               	movwf	adc_output@ponto+1,c
   830  0008E6  0E00               	movlw	0
   831  0008E8                     L1:
   832  0008E8  6E5B               	movwf	adc_output@ponto,c
   833                           
   834                           ;main.c: 60: sprintf(va3, "%d", valor);
   835  0008EA  0E4C               	movlw	low adc_output@va3
   836  0008EC  6E13               	movwf	sprintf@sp,c
   837  0008EE  0E00               	movlw	high adc_output@va3
   838  0008F0  6E14               	movwf	sprintf@sp+1,c
   839  0008F2  0E0B               	movlw	low STR_1
   840  0008F4  6E15               	movwf	sprintf@f,c
   841  0008F6  0E08               	movlw	high STR_1
   842  0008F8  6E16               	movwf	sprintf@f+1,c
   843  0008FA  C048  F017         	movff	adc_output@valor,?_sprintf+4
   844  0008FE  C049  F018         	movff	adc_output@valor+1,?_sprintf+5
   845  000902  ECD1  F005         	call	_sprintf	;wreg free
   846                           
   847                           ;main.c: 61: sprintf(va4, "%d", ponto);
   848  000906  0E51               	movlw	low adc_output@va4
   849  000908  6E13               	movwf	sprintf@sp,c
   850  00090A  0E00               	movlw	high adc_output@va4
   851  00090C  6E14               	movwf	sprintf@sp+1,c
   852  00090E  0E0B               	movlw	low STR_1
   853  000910  6E15               	movwf	sprintf@f,c
   854  000912  0E08               	movlw	high STR_1
   855  000914  6E16               	movwf	sprintf@f+1,c
   856  000916  C05B  F017         	movff	adc_output@ponto,?_sprintf+4
   857  00091A  C05C  F018         	movff	adc_output@ponto+1,?_sprintf+5
   858  00091E  ECD1  F005         	call	_sprintf	;wreg free
   859                           
   860                           ;main.c: 62: tx_data(' ');
   861  000922  0E20               	movlw	32
   862  000924  EC0A  F00A         	call	_tx_data
   863                           
   864                           ;main.c: 63: tx_data(' ');
   865  000928  0E20               	movlw	32
   866  00092A  EC0A  F00A         	call	_tx_data
   867                           
   868                           ;main.c: 64: tx_data('T');
   869  00092E  0E54               	movlw	84
   870  000930  EC0A  F00A         	call	_tx_data
   871                           
   872                           ;main.c: 65: tx_data('=');
   873  000934  0E3D               	movlw	61
   874  000936  EC0A  F00A         	call	_tx_data
   875                           
   876                           ;main.c: 66: tx_data(va3[0]);
   877  00093A  504C               	movf	adc_output@va3,w,c
   878  00093C  EC0A  F00A         	call	_tx_data
   879                           
   880                           ;main.c: 67: tx_data(va3[1]);
   881  000940  504D               	movf	adc_output@va3+1,w,c
   882  000942  EC0A  F00A         	call	_tx_data
   883                           
   884                           ;main.c: 68: tx_data(va3[2]);
   885  000946  504E               	movf	adc_output@va3+2,w,c
   886  000948  EC0A  F00A         	call	_tx_data
   887                           
   888                           ;main.c: 69: tx_data(va3[3]);
   889  00094C  504F               	movf	adc_output@va3+3,w,c
   890  00094E  EC0A  F00A         	call	_tx_data
   891                           
   892                           ;main.c: 70: tx_data('.');
   893  000952  0E2E               	movlw	46
   894  000954  EC0A  F00A         	call	_tx_data
   895                           
   896                           ;main.c: 71: tx_data(va4[0]);
   897  000958  5051               	movf	adc_output@va4,w,c
   898  00095A  EC0A  F00A         	call	_tx_data
   899                           
   900                           ;main.c: 72: tx_data(va4[1]);
   901  00095E  5052               	movf	adc_output@va4+1,w,c
   902  000960  EC0A  F00A         	call	_tx_data
   903                           
   904                           ;main.c: 73: tx_data(va4[2]);
   905  000964  5053               	movf	adc_output@va4+2,w,c
   906  000966  EC0A  F00A         	call	_tx_data
   907                           
   908                           ;main.c: 74: tx_data(va4[3]);
   909  00096A  5054               	movf	adc_output@va4+3,w,c
   910  00096C  EC0A  F00A         	call	_tx_data
   911                           
   912                           ;main.c: 75: tx_data(' ');
   913  000970  0E20               	movlw	32
   914  000972  EC0A  F00A         	call	_tx_data
   915                           
   916                           ;main.c: 76: Delay ();
   917  000976  EC83  F009         	call	_Delay	;wreg free
   918                           
   919                           ;main.c: 77: }
   920  00097A  0012               	return	
   921  00097C                     l1764:
   922                           
   923                           ;main.c: 78: else{
   924                           ;main.c: 79: int tensao = (1480 * ADRES)/1023;
   925  00097C  CFC3 F001          	movff	4035,___wmul@multiplier	;volatile
   926  000980  CFC4 F002          	movff	4036,___wmul@multiplier+1	;volatile
   927  000984  0E05               	movlw	5
   928  000986  6E04               	movwf	___wmul@multiplicand+1,c
   929  000988  0EC8               	movlw	200
   930  00098A  6E03               	movwf	___wmul@multiplicand,c
   931  00098C  ECAE  F009         	call	___wmul	;wreg free
   932  000990  C001  F007         	movff	?___wmul,___lwdiv@dividend
   933  000994  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   934  000998  0E03               	movlw	3
   935  00099A  6E0A               	movwf	___lwdiv@divisor+1,c
   936  00099C  6809               	setf	___lwdiv@divisor,c
   937  00099E  EC39  F009         	call	___lwdiv	;wreg free
   938  0009A2  C007  F04A         	movff	?___lwdiv,adc_output@tensao
   939  0009A6  C008  F04B         	movff	?___lwdiv+1,adc_output@tensao+1
   940                           
   941                           ;main.c: 80: char va3[5];
   942                           ;main.c: 81: sprintf(va3, "%d", tensao);
   943  0009AA  0E56               	movlw	low adc_output@va3_134
   944  0009AC  6E13               	movwf	sprintf@sp,c
   945  0009AE  0E00               	movlw	high adc_output@va3_134
   946  0009B0  6E14               	movwf	sprintf@sp+1,c
   947  0009B2  0E0B               	movlw	low STR_1
   948  0009B4  6E15               	movwf	sprintf@f,c
   949  0009B6  0E08               	movlw	high STR_1
   950  0009B8  6E16               	movwf	sprintf@f+1,c
   951  0009BA  C04A  F017         	movff	adc_output@tensao,?_sprintf+4
   952  0009BE  C04B  F018         	movff	adc_output@tensao+1,?_sprintf+5
   953  0009C2  ECD1  F005         	call	_sprintf	;wreg free
   954                           
   955                           ;main.c: 82: tx_data('V');
   956  0009C6  0E56               	movlw	86
   957  0009C8  EC0A  F00A         	call	_tx_data
   958                           
   959                           ;main.c: 83: tx_data('=');
   960  0009CC  0E3D               	movlw	61
   961  0009CE  EC0A  F00A         	call	_tx_data
   962                           
   963                           ;main.c: 84: tx_data(va3[0]);
   964  0009D2  5056               	movf	adc_output@va3_134,w,c
   965  0009D4  EC0A  F00A         	call	_tx_data
   966                           
   967                           ;main.c: 85: tx_data(va3[1]);
   968  0009D8  5057               	movf	adc_output@va3_134+1,w,c
   969  0009DA  EC0A  F00A         	call	_tx_data
   970                           
   971                           ;main.c: 86: tx_data(va3[2]);
   972  0009DE  5058               	movf	adc_output@va3_134+2,w,c
   973  0009E0  EC0A  F00A         	call	_tx_data
   974                           
   975                           ;main.c: 87: tx_data(va3[3]);
   976  0009E4  5059               	movf	adc_output@va3_134+3,w,c
   977  0009E6  EC0A  F00A         	call	_tx_data
   978                           
   979                           ;main.c: 88: tx_data('.');
   980  0009EA  0E2E               	movlw	46
   981  0009EC  EC0A  F00A         	call	_tx_data
   982                           
   983                           ;main.c: 89: Delay ();
   984  0009F0  EC83  F009         	call	_Delay	;wreg free
   985  0009F4  0012               	return	
   986  0009F6                     __end_of_adc_output:
   987                           	opt stack 0
   988                           tblptru	equ	0xFF8
   989                           intcon	equ	0xFF2
   990                           status	equ	0xFD8
   991                           
   992 ;; *************** function _tx_data *****************
   993 ;; Defined at:
   994 ;;		line 25 in file "main.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  data            1    wreg     unsigned char 
   997 ;; Auto vars:     Size  Location     Type
   998 ;;  data            1    0[COMRAM] unsigned char 
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg
  1003 ;; Tracked objects:
  1004 ;;		On entry : 0/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1008 ;;      Params:         0       0       0       0       0       0       0       0       0
  1009 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1010 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1011 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1012 ;;Total ram usage:        1 bytes
  1013 ;; Hardware stack levels used:    1
  1014 ;; This function calls:
  1015 ;;		Nothing
  1016 ;; This function is called by:
  1017 ;;		_adc_output
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text5
  1022  001414                     __ptext5:
  1023                           	opt stack 0
  1024  001414                     _tx_data:
  1025                           	opt stack 29
  1026                           
  1027                           ;incstack = 0
  1028                           ;tx_data@data stored from wreg
  1029  001414  6E01               	movwf	tx_data@data,c
  1030                           
  1031                           ;main.c: 26: TXREG = data;
  1032  001416  C001  FFAD         	movff	tx_data@data,4013	;volatile
  1033  00141A                     l47:
  1034  00141A  B89E               	btfsc	3998,4,c	;volatile
  1035  00141C  0012               	return	
  1036  00141E  D7FD               	goto	l47
  1037  001420                     __end_of_tx_data:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           intcon	equ	0xFF2
  1041                           status	equ	0xFD8
  1042                           
  1043 ;; *************** function _sprintf *****************
  1044 ;; Defined at:
  1045 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  sp              2   18[COMRAM] PTR unsigned char 
  1048 ;;		 -> adc_output@va3_134(5), adc_output@va4(5), adc_output@va3(5), 
  1049 ;;  f               2   20[COMRAM] PTR const unsigned char 
  1050 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;  tmpval          4    0        struct .
  1053 ;;  cp              3    0        PTR const unsigned char 
  1054 ;;  val             2   29[COMRAM] unsigned int 
  1055 ;;  ap              2   25[COMRAM] PTR void [1]
  1056 ;;		 -> ?_sprintf(2), 
  1057 ;;  len             2    0        unsigned int 
  1058 ;;  c               1   31[COMRAM] char 
  1059 ;;  prec            1   28[COMRAM] char 
  1060 ;;  flag            1   27[COMRAM] unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  2   18[COMRAM] int 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1070 ;;      Params:         6       0       0       0       0       0       0       0       0
  1071 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1072 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1073 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1074 ;;Total ram usage:       14 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    1
  1077 ;; This function calls:
  1078 ;;		___lwdiv
  1079 ;;		___lwmod
  1080 ;; This function is called by:
  1081 ;;		_adc_output
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text6
  1086  000BA2                     __ptext6:
  1087                           	opt stack 0
  1088  000BA2                     _sprintf:
  1089                           	opt stack 28
  1090                           
  1091                           ;doprnt.c: 494: va_list ap;
  1092                           ;doprnt.c: 499: signed char c;
  1093                           ;doprnt.c: 506: signed char prec;
  1094                           ;doprnt.c: 508: unsigned char flag;
  1095                           ;doprnt.c: 523: union {
  1096                           ;doprnt.c: 524: unsigned long vd;
  1097                           ;doprnt.c: 525: double integ;
  1098                           ;doprnt.c: 526: } tmpval;
  1099                           ;doprnt.c: 528: unsigned int val;
  1100                           ;doprnt.c: 529: unsigned len;
  1101                           ;doprnt.c: 530: const char * cp;
  1102                           ;doprnt.c: 533: *ap = __va_start();
  1103                           
  1104                           ;incstack = 0
  1105  000BA2  0E17               	movlw	low (?_sprintf+4)
  1106  000BA4  6E1A               	movwf	sprintf@ap,c
  1107  000BA6  0E00               	movlw	high (?_sprintf+4)
  1108  000BA8  6E1B               	movwf	sprintf@ap+1,c
  1109                           
  1110                           ;doprnt.c: 536: while(c = *f++) {
  1111  000BAA  D08C               	goto	l1700
  1112  000BAC                     l1648:
  1113                           
  1114                           ;doprnt.c: 538: if(c != '%')
  1115  000BAC  0E25               	movlw	37
  1116  000BAE  1820               	xorwf	sprintf@c,w,c
  1117  000BB0  B4D8               	btfsc	status,2,c
  1118  000BB2  D009               	goto	l1654
  1119                           
  1120                           ;doprnt.c: 540: {
  1121                           ;doprnt.c: 541: ((*sp++ = (c)));
  1122  000BB4  C013  FFD9         	movff	sprintf@sp,fsr2l
  1123  000BB8  C014  FFDA         	movff	sprintf@sp+1,fsr2h
  1124  000BBC  C020  FFDF         	movff	sprintf@c,indf2
  1125  000BC0  4A13               	infsnz	sprintf@sp,f,c
  1126  000BC2  2A14               	incf	sprintf@sp+1,f,c
  1127                           
  1128                           ;doprnt.c: 542: continue;
  1129  000BC4  D07F               	goto	l1700
  1130  000BC6                     l1654:
  1131                           
  1132                           ;doprnt.c: 543: }
  1133                           ;doprnt.c: 548: flag = 0;
  1134  000BC6  0E00               	movlw	0
  1135  000BC8  6E1C               	movwf	sprintf@flag,c
  1136                           
  1137                           ;doprnt.c: 822: }
  1138                           
  1139                           ;doprnt.c: 813: continue;
  1140                           
  1141                           ;doprnt.c: 802: default:
  1142                           
  1143                           ;doprnt.c: 698: case 'i':
  1144                           ;doprnt.c: 699: break;
  1145                           
  1146                           ;doprnt.c: 697: case 'd':
  1147                           
  1148                           ;doprnt.c: 638: goto alldone;
  1149                           
  1150                           ;doprnt.c: 637: case 0:
  1151                           
  1152                           ;doprnt.c: 635: switch(c = *f++) {
  1153  000BCA  C015  FFF6         	movff	sprintf@f,tblptrl
  1154  000BCE  C016  FFF7         	movff	sprintf@f+1,tblptrh
  1155  000BD2  4A15               	infsnz	sprintf@f,f,c
  1156  000BD4  2A16               	incf	sprintf@f+1,f,c
  1157  000BD6                     	if	0	;tblptru may be non-zero
  1158  000BD6                     	endif
  1159  000BD6                     	if	0	;tblptru may be non-zero
  1160  000BD6                     	endif
  1161  000BD6  0008               	tblrd		*
  1162  000BD8  CFF5 F020          	movff	tablat,sprintf@c
  1163  000BDC  5020               	movf	sprintf@c,w,c
  1164                           
  1165                           ; Switch size 1, requested type "space"
  1166                           ; Number of cases is 3, Range of values is 0 to 105
  1167                           ; switch strategies available:
  1168                           ; Name         Instructions Cycles
  1169                           ; simple_byte           10     6 (average)
  1170                           ;	Chosen strategy is simple_byte
  1171  000BDE  0A00               	xorlw	0	; case 0
  1172  000BE0  B4D8               	btfsc	status,2,c
  1173  000BE2  D07C               	goto	l1702
  1174  000BE4  0A64               	xorlw	100	; case 100
  1175  000BE6  B4D8               	btfsc	status,2,c
  1176  000BE8  D003               	goto	l1660
  1177  000BEA  0A0D               	xorlw	13	; case 105
  1178  000BEC  A4D8               	btfss	status,2,c
  1179  000BEE  D06A               	goto	l1700
  1180  000BF0                     l1660:
  1181                           
  1182                           ;doprnt.c: 1253: {
  1183                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1184  000BF0  C01A  FFD9         	movff	sprintf@ap,fsr2l
  1185  000BF4  C01B  FFDA         	movff	sprintf@ap+1,fsr2h
  1186  000BF8  CFDE F01E          	movff	postinc2,sprintf@val
  1187  000BFC  CFDD F01F          	movff	postdec2,sprintf@val+1
  1188  000C00  0E02               	movlw	2
  1189  000C02  261A               	addwf	sprintf@ap,f,c
  1190  000C04  0E00               	movlw	0
  1191  000C06  221B               	addwfc	sprintf@ap+1,f,c
  1192                           
  1193                           ;doprnt.c: 1261: if((int)val < 0) {
  1194  000C08  AE1F               	btfss	sprintf@val+1,7,c
  1195  000C0A  D006               	goto	l1670
  1196                           
  1197                           ;doprnt.c: 1262: flag |= 0x03;
  1198  000C0C  0E03               	movlw	3
  1199  000C0E  121C               	iorwf	sprintf@flag,f,c
  1200                           
  1201                           ;doprnt.c: 1263: val = -val;
  1202  000C10  6C1E               	negf	sprintf@val,c
  1203  000C12  1E1F               	comf	sprintf@val+1,f,c
  1204  000C14  B0D8               	btfsc	status,0,c
  1205  000C16  2A1F               	incf	sprintf@val+1,f,c
  1206  000C18                     l1670:
  1207                           
  1208                           ;doprnt.c: 1264: }
  1209                           ;doprnt.c: 1266: }
  1210                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1211  000C18  0E01               	movlw	1
  1212  000C1A  6E20               	movwf	sprintf@c,c
  1213  000C1C                     l1672:
  1214  000C1C  0E05               	movlw	5
  1215  000C1E  1820               	xorwf	sprintf@c,w,c
  1216  000C20  B4D8               	btfsc	status,2,c
  1217  000C22  D012               	goto	l1684
  1218                           
  1219                           ;doprnt.c: 1306: if(val < dpowers[c])
  1220  000C24  5020               	movf	sprintf@c,w,c
  1221  000C26  0D02               	mullw	2
  1222  000C28  0E01               	movlw	low _dpowers
  1223  000C2A  24F3               	addwf	prodl,w,c
  1224  000C2C  6EF6               	movwf	tblptrl,c
  1225  000C2E  0E08               	movlw	high _dpowers
  1226  000C30  20F4               	addwfc	prodh,w,c
  1227  000C32  6EF7               	movwf	tblptrh,c
  1228  000C34                     	if	0	;There are less than 3 active tblptr bytes
  1229  000C34                     	endif
  1230  000C34  0009               	tblrd		*+
  1231  000C36  50F5               	movf	tablat,w,c
  1232  000C38  5C1E               	subwf	sprintf@val,w,c
  1233  000C3A  0009               	tblrd		*+
  1234  000C3C  50F5               	movf	tablat,w,c
  1235  000C3E  581F               	subwfb	sprintf@val+1,w,c
  1236  000C40  A0D8               	btfss	status,0,c
  1237  000C42  D002               	goto	l1684
  1238                           
  1239                           ;doprnt.c: 1307: break;
  1240  000C44  2A20               	incf	sprintf@c,f,c
  1241  000C46  D7EA               	goto	l1672
  1242  000C48                     l1684:
  1243                           
  1244                           ;doprnt.c: 1422: {
  1245                           ;doprnt.c: 1438: if(flag & 0x03)
  1246  000C48  C01C  F019         	movff	sprintf@flag,??_sprintf
  1247  000C4C  0E03               	movlw	3
  1248  000C4E  1619               	andwf	??_sprintf,f,c
  1249  000C50  B4D8               	btfsc	status,2,c
  1250  000C52  D008               	goto	l1690
  1251                           
  1252                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1253  000C54  C013  FFD9         	movff	sprintf@sp,fsr2l
  1254  000C58  C014  FFDA         	movff	sprintf@sp+1,fsr2h
  1255  000C5C  0E2D               	movlw	45
  1256  000C5E  6EDF               	movwf	indf2,c
  1257  000C60  4A13               	infsnz	sprintf@sp,f,c
  1258  000C62  2A14               	incf	sprintf@sp+1,f,c
  1259  000C64                     l1690:
  1260                           
  1261                           ;doprnt.c: 1469: }
  1262                           ;doprnt.c: 1472: prec = c;
  1263  000C64  C020  F01D         	movff	sprintf@c,sprintf@prec
  1264                           
  1265                           ;doprnt.c: 1474: while(prec--) {
  1266  000C68  D029               	goto	l1698
  1267  000C6A                     l1692:
  1268                           
  1269                           ;doprnt.c: 1478: {
  1270                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1271  000C6A  501D               	movf	sprintf@prec,w,c
  1272  000C6C  0D02               	mullw	2
  1273  000C6E  0E01               	movlw	low _dpowers
  1274  000C70  24F3               	addwf	prodl,w,c
  1275  000C72  6EF6               	movwf	tblptrl,c
  1276  000C74  0E08               	movlw	high _dpowers
  1277  000C76  20F4               	addwfc	prodh,w,c
  1278  000C78  6EF7               	movwf	tblptrh,c
  1279  000C7A                     	if	0	;There are less than 3 active tblptr bytes
  1280  000C7A                     	endif
  1281  000C7A  0009               	tblrd		*+
  1282  000C7C  CFF5 F009          	movff	tablat,___lwdiv@divisor
  1283  000C80  000A               	tblrd		*-
  1284  000C82  CFF5 F00A          	movff	tablat,___lwdiv@divisor+1
  1285  000C86  C01E  F007         	movff	sprintf@val,___lwdiv@dividend
  1286  000C8A  C01F  F008         	movff	sprintf@val+1,___lwdiv@dividend+1
  1287  000C8E  EC39  F009         	call	___lwdiv	;wreg free
  1288  000C92  C007  F00E         	movff	?___lwdiv,___lwmod@dividend
  1289  000C96  C008  F00F         	movff	?___lwdiv+1,___lwmod@dividend+1
  1290  000C9A  0E00               	movlw	0
  1291  000C9C  6E11               	movwf	___lwmod@divisor+1,c
  1292  000C9E  0E0A               	movlw	10
  1293  000CA0  6E10               	movwf	___lwmod@divisor,c
  1294  000CA2  EC62  F009         	call	___lwmod	;wreg free
  1295  000CA6  500E               	movf	?___lwmod,w,c
  1296  000CA8  0F30               	addlw	48
  1297  000CAA  6E20               	movwf	sprintf@c,c
  1298                           
  1299                           ;doprnt.c: 1523: }
  1300                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1301  000CAC  C013  FFD9         	movff	sprintf@sp,fsr2l
  1302  000CB0  C014  FFDA         	movff	sprintf@sp+1,fsr2h
  1303  000CB4  C020  FFDF         	movff	sprintf@c,indf2
  1304  000CB8  4A13               	infsnz	sprintf@sp,f,c
  1305  000CBA  2A14               	incf	sprintf@sp+1,f,c
  1306  000CBC                     l1698:
  1307  000CBC  061D               	decf	sprintf@prec,f,c
  1308  000CBE  281D               	incf	sprintf@prec,w,c
  1309  000CC0  A4D8               	btfss	status,2,c
  1310  000CC2  D7D3               	goto	l1692
  1311  000CC4                     l1700:
  1312  000CC4  C015  FFF6         	movff	sprintf@f,tblptrl
  1313  000CC8  C016  FFF7         	movff	sprintf@f+1,tblptrh
  1314  000CCC  4A15               	infsnz	sprintf@f,f,c
  1315  000CCE  2A16               	incf	sprintf@f+1,f,c
  1316  000CD0                     	if	0	;tblptru may be non-zero
  1317  000CD0                     	endif
  1318  000CD0                     	if	0	;tblptru may be non-zero
  1319  000CD0                     	endif
  1320  000CD0  0008               	tblrd		*
  1321  000CD2  CFF5 F020          	movff	tablat,sprintf@c
  1322  000CD6  5020               	movf	sprintf@c,w,c
  1323  000CD8  A4D8               	btfss	status,2,c
  1324  000CDA  D768               	goto	l1648
  1325  000CDC                     l1702:
  1326                           
  1327                           ;doprnt.c: 1538: *sp = 0;
  1328  000CDC  C013  FFD9         	movff	sprintf@sp,fsr2l
  1329  000CE0  C014  FFDA         	movff	sprintf@sp+1,fsr2h
  1330  000CE4  0E00               	movlw	0
  1331  000CE6  6EDF               	movwf	indf2,c
  1332  000CE8  0012               	return	
  1333  000CEA                     __end_of_sprintf:
  1334                           	opt stack 0
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           prodh	equ	0xFF4
  1340                           prodl	equ	0xFF3
  1341                           intcon	equ	0xFF2
  1342                           indf2	equ	0xFDF
  1343                           postinc2	equ	0xFDE
  1344                           postdec2	equ	0xFDD
  1345                           fsr2h	equ	0xFDA
  1346                           fsr2l	equ	0xFD9
  1347                           status	equ	0xFD8
  1348                           
  1349 ;; *************** function ___lwmod *****************
  1350 ;; Defined at:
  1351 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  dividend        2   13[COMRAM] unsigned int 
  1354 ;;  divisor         2   15[COMRAM] unsigned int 
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  counter         1   17[COMRAM] unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  2   13[COMRAM] unsigned int 
  1359 ;; Registers used:
  1360 ;;		wreg, status,2, status,0
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1366 ;;      Params:         4       0       0       0       0       0       0       0       0
  1367 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1369 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1370 ;;Total ram usage:        5 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; This function calls:
  1373 ;;		Nothing
  1374 ;; This function is called by:
  1375 ;;		_sprintf
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text7
  1380  0012C4                     __ptext7:
  1381                           	opt stack 0
  1382  0012C4                     ___lwmod:
  1383                           	opt stack 28
  1384                           
  1385                           ;incstack = 0
  1386  0012C4  5010               	movf	___lwmod@divisor,w,c
  1387  0012C6  1011               	iorwf	___lwmod@divisor+1,w,c
  1388  0012C8  B4D8               	btfsc	status,2,c
  1389  0012CA  D018               	goto	l528
  1390  0012CC  0E01               	movlw	1
  1391  0012CE  6E12               	movwf	___lwmod@counter,c
  1392  0012D0  D004               	goto	l1614
  1393  0012D2                     l1612:
  1394  0012D2  90D8               	bcf	status,0,c
  1395  0012D4  3610               	rlcf	___lwmod@divisor,f,c
  1396  0012D6  3611               	rlcf	___lwmod@divisor+1,f,c
  1397  0012D8  2A12               	incf	___lwmod@counter,f,c
  1398  0012DA                     l1614:
  1399  0012DA  AE11               	btfss	___lwmod@divisor+1,7,c
  1400  0012DC  D7FA               	goto	l1612
  1401  0012DE                     l1616:
  1402  0012DE  5010               	movf	___lwmod@divisor,w,c
  1403  0012E0  5C0E               	subwf	___lwmod@dividend,w,c
  1404  0012E2  5011               	movf	___lwmod@divisor+1,w,c
  1405  0012E4  580F               	subwfb	___lwmod@dividend+1,w,c
  1406  0012E6  A0D8               	btfss	status,0,c
  1407  0012E8  D004               	goto	l1620
  1408  0012EA  5010               	movf	___lwmod@divisor,w,c
  1409  0012EC  5E0E               	subwf	___lwmod@dividend,f,c
  1410  0012EE  5011               	movf	___lwmod@divisor+1,w,c
  1411  0012F0  5A0F               	subwfb	___lwmod@dividend+1,f,c
  1412  0012F2                     l1620:
  1413  0012F2  90D8               	bcf	status,0,c
  1414  0012F4  3211               	rrcf	___lwmod@divisor+1,f,c
  1415  0012F6  3210               	rrcf	___lwmod@divisor,f,c
  1416  0012F8  2E12               	decfsz	___lwmod@counter,f,c
  1417  0012FA  D7F1               	goto	l1616
  1418  0012FC                     l528:
  1419  0012FC  C00E  F00E         	movff	___lwmod@dividend,?___lwmod
  1420  001300  C00F  F00F         	movff	___lwmod@dividend+1,?___lwmod+1
  1421  001304  0012               	return		;funcret
  1422  001306                     __end_of___lwmod:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           prodh	equ	0xFF4
  1429                           prodl	equ	0xFF3
  1430                           intcon	equ	0xFF2
  1431                           indf2	equ	0xFDF
  1432                           postinc2	equ	0xFDE
  1433                           postdec2	equ	0xFDD
  1434                           fsr2h	equ	0xFDA
  1435                           fsr2l	equ	0xFD9
  1436                           status	equ	0xFD8
  1437                           
  1438 ;; *************** function ___lwdiv *****************
  1439 ;; Defined at:
  1440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;  dividend        2    6[COMRAM] unsigned int 
  1443 ;;  divisor         2    8[COMRAM] unsigned int 
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;  quotient        2   10[COMRAM] unsigned int 
  1446 ;;  counter         1   12[COMRAM] unsigned char 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  2    6[COMRAM] unsigned int 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1456 ;;      Params:         4       0       0       0       0       0       0       0       0
  1457 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1459 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1460 ;;Total ram usage:        7 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_adc_output
  1466 ;;		_sprintf
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text8
  1471  001272                     __ptext8:
  1472                           	opt stack 0
  1473  001272                     ___lwdiv:
  1474                           	opt stack 28
  1475                           
  1476                           ;incstack = 0
  1477  001272  0E00               	movlw	0
  1478  001274  6E0C               	movwf	___lwdiv@quotient+1,c
  1479  001276  0E00               	movlw	0
  1480  001278  6E0B               	movwf	___lwdiv@quotient,c
  1481  00127A  5009               	movf	___lwdiv@divisor,w,c
  1482  00127C  100A               	iorwf	___lwdiv@divisor+1,w,c
  1483  00127E  B4D8               	btfsc	status,2,c
  1484  001280  D01C               	goto	l518
  1485  001282  0E01               	movlw	1
  1486  001284  6E0D               	movwf	___lwdiv@counter,c
  1487  001286  D004               	goto	l1594
  1488  001288                     l1592:
  1489  001288  90D8               	bcf	status,0,c
  1490  00128A  3609               	rlcf	___lwdiv@divisor,f,c
  1491  00128C  360A               	rlcf	___lwdiv@divisor+1,f,c
  1492  00128E  2A0D               	incf	___lwdiv@counter,f,c
  1493  001290                     l1594:
  1494  001290  AE0A               	btfss	___lwdiv@divisor+1,7,c
  1495  001292  D7FA               	goto	l1592
  1496  001294                     l1596:
  1497  001294  90D8               	bcf	status,0,c
  1498  001296  360B               	rlcf	___lwdiv@quotient,f,c
  1499  001298  360C               	rlcf	___lwdiv@quotient+1,f,c
  1500  00129A  5009               	movf	___lwdiv@divisor,w,c
  1501  00129C  5C07               	subwf	___lwdiv@dividend,w,c
  1502  00129E  500A               	movf	___lwdiv@divisor+1,w,c
  1503  0012A0  5808               	subwfb	___lwdiv@dividend+1,w,c
  1504  0012A2  A0D8               	btfss	status,0,c
  1505  0012A4  D005               	goto	l1604
  1506  0012A6  5009               	movf	___lwdiv@divisor,w,c
  1507  0012A8  5E07               	subwf	___lwdiv@dividend,f,c
  1508  0012AA  500A               	movf	___lwdiv@divisor+1,w,c
  1509  0012AC  5A08               	subwfb	___lwdiv@dividend+1,f,c
  1510  0012AE  800B               	bsf	___lwdiv@quotient,0,c
  1511  0012B0                     l1604:
  1512  0012B0  90D8               	bcf	status,0,c
  1513  0012B2  320A               	rrcf	___lwdiv@divisor+1,f,c
  1514  0012B4  3209               	rrcf	___lwdiv@divisor,f,c
  1515  0012B6  2E0D               	decfsz	___lwdiv@counter,f,c
  1516  0012B8  D7ED               	goto	l1596
  1517  0012BA                     l518:
  1518  0012BA  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1519  0012BE  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1520  0012C2  0012               	return		;funcret
  1521  0012C4                     __end_of___lwdiv:
  1522                           	opt stack 0
  1523                           tblptru	equ	0xFF8
  1524                           tblptrh	equ	0xFF7
  1525                           tblptrl	equ	0xFF6
  1526                           tablat	equ	0xFF5
  1527                           prodh	equ	0xFF4
  1528                           prodl	equ	0xFF3
  1529                           intcon	equ	0xFF2
  1530                           indf2	equ	0xFDF
  1531                           postinc2	equ	0xFDE
  1532                           postdec2	equ	0xFDD
  1533                           fsr2h	equ	0xFDA
  1534                           fsr2l	equ	0xFD9
  1535                           status	equ	0xFD8
  1536                           
  1537 ;; *************** function _fmod *****************
  1538 ;; Defined at:
  1539 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fmod.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  x               3   59[COMRAM] unsigned int 
  1542 ;;  y               3   62[COMRAM] unsigned int 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  n               3   65[COMRAM] unsigned int 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  3   59[COMRAM] unsigned int 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1554 ;;      Params:         6       0       0       0       0       0       0       0       0
  1555 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1557 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1558 ;;Total ram usage:        9 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    3
  1561 ;; This function calls:
  1562 ;;		___ftadd
  1563 ;;		___ftdiv
  1564 ;;		___ftmul
  1565 ;;		___ftneg
  1566 ;;		_trunc
  1567 ;; This function is called by:
  1568 ;;		_adc_output
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text9
  1573  001066                     __ptext9:
  1574                           	opt stack 0
  1575  001066                     _fmod:
  1576                           	opt stack 26
  1577                           
  1578                           ;incstack = 0
  1579  001066  C03C  F00C         	movff	fmod@x,___ftdiv@f1
  1580  00106A  C03D  F00D         	movff	fmod@x+1,___ftdiv@f1+1
  1581  00106E  C03E  F00E         	movff	fmod@x+2,___ftdiv@f1+2
  1582  001072  C03F  F00F         	movff	fmod@y,___ftdiv@f2
  1583  001076  C040  F010         	movff	fmod@y+1,___ftdiv@f2+1
  1584  00107A  C041  F011         	movff	fmod@y+2,___ftdiv@f2+2
  1585  00107E  EC69  F007         	call	___ftdiv	;wreg free
  1586  001082  C00C  F042         	movff	?___ftdiv,fmod@n
  1587  001086  C00D  F043         	movff	?___ftdiv+1,fmod@n+1
  1588  00108A  C00E  F044         	movff	?___ftdiv+2,fmod@n+2
  1589  00108E  C042  F034         	movff	fmod@n,trunc@x
  1590  001092  C043  F035         	movff	fmod@n+1,trunc@x+1
  1591  001096  C044  F036         	movff	fmod@n+2,trunc@x+2
  1592  00109A  EC80  F008         	call	_trunc	;wreg free
  1593  00109E  C034  F042         	movff	?_trunc,fmod@n
  1594  0010A2  C035  F043         	movff	?_trunc+1,fmod@n+1
  1595  0010A6  C036  F044         	movff	?_trunc+2,fmod@n+2
  1596  0010AA  C03F  F00C         	movff	fmod@y,___ftmul@f2
  1597  0010AE  C040  F00D         	movff	fmod@y+1,___ftmul@f2+1
  1598  0010B2  C041  F00E         	movff	fmod@y+2,___ftmul@f2+2
  1599  0010B6  C042  F009         	movff	fmod@n,___ftmul@f1
  1600  0010BA  C043  F00A         	movff	fmod@n+1,___ftmul@f1+1
  1601  0010BE  C044  F00B         	movff	fmod@n+2,___ftmul@f1+2
  1602  0010C2  ECEF  F006         	call	___ftmul	;wreg free
  1603  0010C6  C009  F018         	movff	?___ftmul,___ftneg@f1
  1604  0010CA  C00A  F019         	movff	?___ftmul+1,___ftneg@f1+1
  1605  0010CE  C00B  F01A         	movff	?___ftmul+2,___ftneg@f1+2
  1606  0010D2  ECC1  F009         	call	___ftneg	;wreg free
  1607  0010D6  C018  F01B         	movff	?___ftneg,___ftadd@f1
  1608  0010DA  C019  F01C         	movff	?___ftneg+1,___ftadd@f1+1
  1609  0010DE  C01A  F01D         	movff	?___ftneg+2,___ftadd@f1+2
  1610  0010E2  C03C  F01E         	movff	fmod@x,___ftadd@f2
  1611  0010E6  C03D  F01F         	movff	fmod@x+1,___ftadd@f2+1
  1612  0010EA  C03E  F020         	movff	fmod@x+2,___ftadd@f2+2
  1613  0010EE  ECFB  F004         	call	___ftadd	;wreg free
  1614  0010F2  C01B  F03C         	movff	?___ftadd,?_fmod
  1615  0010F6  C01C  F03D         	movff	?___ftadd+1,?_fmod+1
  1616  0010FA  C01D  F03E         	movff	?___ftadd+2,?_fmod+2
  1617  0010FE  0012               	return	
  1618  001100                     __end_of_fmod:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           prodh	equ	0xFF4
  1625                           prodl	equ	0xFF3
  1626                           intcon	equ	0xFF2
  1627                           indf2	equ	0xFDF
  1628                           postinc2	equ	0xFDE
  1629                           postdec2	equ	0xFDD
  1630                           fsr2h	equ	0xFDA
  1631                           fsr2l	equ	0xFD9
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _trunc *****************
  1635 ;; Defined at:
  1636 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;  x               3   51[COMRAM] unsigned int 
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  i               3   54[COMRAM] unsigned int 
  1641 ;;  expon           2   57[COMRAM] int 
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  3   51[COMRAM] int 
  1644 ;; Registers used:
  1645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1651 ;;      Params:         3       0       0       0       0       0       0       0       0
  1652 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1654 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1655 ;;Total ram usage:        8 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:    2
  1658 ;; This function calls:
  1659 ;;		___altoft
  1660 ;;		___fttol
  1661 ;;		_frexp
  1662 ;; This function is called by:
  1663 ;;		_fmod
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text10
  1668  001100                     __ptext10:
  1669                           	opt stack 0
  1670  001100                     _trunc:
  1671                           	opt stack 26
  1672                           
  1673                           ;incstack = 0
  1674  001100  C034  F001         	movff	trunc@x,frexp@value
  1675  001104  C035  F002         	movff	trunc@x+1,frexp@value+1
  1676  001108  C036  F003         	movff	trunc@x+2,frexp@value+2
  1677  00110C  0E3A               	movlw	low trunc@expon
  1678  00110E  6E04               	movwf	frexp@eptr,c
  1679  001110  0E00               	movlw	high trunc@expon
  1680  001112  6E05               	movwf	frexp@eptr+1,c
  1681  001114  ECC1  F008         	call	_frexp	;wreg free
  1682  001118  AE3B               	btfss	trunc@expon+1,7,c
  1683  00111A  D007               	goto	l1572
  1684  00111C  0E00               	movlw	0
  1685  00111E  6E34               	movwf	?_trunc,c
  1686  001120  0E00               	movlw	0
  1687  001122  6E35               	movwf	?_trunc+1,c
  1688  001124  0E00               	movlw	0
  1689  001126  6E36               	movwf	?_trunc+2,c
  1690  001128  0012               	return	
  1691  00112A                     l1572:
  1692  00112A  503B               	movf	trunc@expon+1,w,c
  1693  00112C  E104               	bnz	u1300
  1694  00112E  0E15               	movlw	21
  1695  001130  5C3A               	subwf	trunc@expon,w,c
  1696  001132  A0D8               	btfss	status,0,c
  1697  001134  D007               	goto	l1576
  1698  001136                     u1300:
  1699  001136  C034  F034         	movff	trunc@x,?_trunc
  1700  00113A  C035  F035         	movff	trunc@x+1,?_trunc+1
  1701  00113E  C036  F036         	movff	trunc@x+2,?_trunc+2
  1702  001142  0012               	return	
  1703  001144                     l1576:
  1704  001144  C034  F01B         	movff	trunc@x,___fttol@f1
  1705  001148  C035  F01C         	movff	trunc@x+1,___fttol@f1+1
  1706  00114C  C036  F01D         	movff	trunc@x+2,___fttol@f1+2
  1707  001150  EC75  F006         	call	___fttol	;wreg free
  1708  001154  C01B  F02A         	movff	?___fttol,___altoft@c
  1709  001158  C01C  F02B         	movff	?___fttol+1,___altoft@c+1
  1710  00115C  C01D  F02C         	movff	?___fttol+2,___altoft@c+2
  1711  001160  C01E  F02D         	movff	?___fttol+3,___altoft@c+3
  1712  001164  ECFD  F008         	call	___altoft	;wreg free
  1713  001168  C02A  F037         	movff	?___altoft,trunc@i
  1714  00116C  C02B  F038         	movff	?___altoft+1,trunc@i+1
  1715  001170  C02C  F039         	movff	?___altoft+2,trunc@i+2
  1716  001174  C037  F034         	movff	trunc@i,?_trunc
  1717  001178  C038  F035         	movff	trunc@i+1,?_trunc+1
  1718  00117C  C039  F036         	movff	trunc@i+2,?_trunc+2
  1719  001180  0012               	return	
  1720  001182                     __end_of_trunc:
  1721                           	opt stack 0
  1722                           tblptru	equ	0xFF8
  1723                           tblptrh	equ	0xFF7
  1724                           tblptrl	equ	0xFF6
  1725                           tablat	equ	0xFF5
  1726                           prodh	equ	0xFF4
  1727                           prodl	equ	0xFF3
  1728                           intcon	equ	0xFF2
  1729                           indf2	equ	0xFDF
  1730                           postinc2	equ	0xFDE
  1731                           postdec2	equ	0xFDD
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function _frexp *****************
  1737 ;; Defined at:
  1738 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  value           3    0[COMRAM] int 
  1741 ;;  eptr            2    3[COMRAM] PTR int 
  1742 ;;		 -> trunc@expon(2), 
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  3    0[COMRAM] PTR int 
  1747 ;; Registers used:
  1748 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1754 ;;      Params:         5       0       0       0       0       0       0       0       0
  1755 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1756 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1757 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1758 ;;Total ram usage:        7 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_trunc
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text11
  1768  001182                     __ptext11:
  1769                           	opt stack 0
  1770  001182                     _frexp:
  1771                           	opt stack 27
  1772                           
  1773                           ;incstack = 0
  1774  001182  5001               	movf	frexp@value,w,c
  1775  001184  1002               	iorwf	frexp@value+1,w,c
  1776  001186  1003               	iorwf	frexp@value+2,w,c
  1777  001188  A4D8               	btfss	status,2,c
  1778  00118A  D009               	goto	l1390
  1779  00118C  C004  FFD9         	movff	frexp@eptr,fsr2l
  1780  001190  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1781  001194  0E00               	movlw	0
  1782  001196  6EDE               	movwf	postinc2,c
  1783  001198  0E00               	movlw	0
  1784  00119A  6EDD               	movwf	postdec2,c
  1785                           
  1786                           ;	Return value of _frexp is never used
  1787  00119C  0012               	return	
  1788  00119E                     l1390:
  1789  00119E  5003               	movf	frexp@value+2,w,c
  1790  0011A0  0B7F               	andlw	127
  1791  0011A2  6E06               	movwf	??_frexp& (0+255),c
  1792  0011A4  6A07               	clrf	(??_frexp+1)& (0+255),c
  1793  0011A6  90D8               	bcf	status,0,c
  1794  0011A8  3606               	rlcf	??_frexp,f,c
  1795  0011AA  3607               	rlcf	??_frexp+1,f,c
  1796  0011AC  C004  FFD9         	movff	frexp@eptr,fsr2l
  1797  0011B0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1798  0011B4  C006  FFDE         	movff	??_frexp,postinc2
  1799  0011B8  C007  FFDD         	movff	??_frexp+1,postdec2
  1800  0011BC  AE02               	btfss	frexp@value+1,7,c
  1801  0011BE  D003               	goto	u960
  1802  0011C0  6A06               	clrf	??_frexp& (0+255),c
  1803  0011C2  2A06               	incf	??_frexp& (0+255),f,c
  1804  0011C4  D001               	goto	u968
  1805  0011C6                     u960:
  1806  0011C6  6A06               	clrf	??_frexp& (0+255),c
  1807  0011C8                     u968:
  1808  0011C8  5006               	movf	??_frexp,w,c
  1809  0011CA  C004  FFD9         	movff	frexp@eptr,fsr2l
  1810  0011CE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1811  0011D2  12DE               	iorwf	postinc2,f,c
  1812  0011D4  0E00               	movlw	0
  1813  0011D6  12DD               	iorwf	postdec2,f,c
  1814  0011D8  C004  FFD9         	movff	frexp@eptr,fsr2l
  1815  0011DC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1816  0011E0  0E82               	movlw	130
  1817  0011E2  26DE               	addwf	postinc2,f,c
  1818  0011E4  0EFF               	movlw	255
  1819  0011E6  22DD               	addwfc	postdec2,f,c
  1820  0011E8  8003               	bsf	frexp@value+2,0,c
  1821  0011EA  8203               	bsf	frexp@value+2,1,c
  1822  0011EC  8403               	bsf	frexp@value+2,2,c
  1823  0011EE  8603               	bsf	frexp@value+2,3,c
  1824  0011F0  8803               	bsf	frexp@value+2,4,c
  1825  0011F2  8A03               	bsf	frexp@value+2,5,c
  1826  0011F4  9C03               	bcf	frexp@value+2,6,c
  1827  0011F6  9E02               	bcf	frexp@value+1,7,c
  1828  0011F8  0012               	return	
  1829  0011FA                     __end_of_frexp:
  1830                           	opt stack 0
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodh	equ	0xFF4
  1836                           prodl	equ	0xFF3
  1837                           intcon	equ	0xFF2
  1838                           indf2	equ	0xFDF
  1839                           postinc2	equ	0xFDE
  1840                           postdec2	equ	0xFDD
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function ___fttol *****************
  1846 ;; Defined at:
  1847 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  f1              3   26[COMRAM] float 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  lval            4   36[COMRAM] unsigned long 
  1852 ;;  exp1            1   40[COMRAM] unsigned char 
  1853 ;;  sign1           1   35[COMRAM] unsigned char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  4   26[COMRAM] long 
  1856 ;; Registers used:
  1857 ;;		wreg, status,2, status,0
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1863 ;;      Params:         4       0       0       0       0       0       0       0       0
  1864 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1865 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1866 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1867 ;;Total ram usage:       15 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; This function calls:
  1870 ;;		Nothing
  1871 ;; This function is called by:
  1872 ;;		_adc_output
  1873 ;;		_trunc
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           	psect	text12
  1878  000CEA                     __ptext12:
  1879                           	opt stack 0
  1880  000CEA                     ___fttol:
  1881                           	opt stack 27
  1882                           
  1883                           ;incstack = 0
  1884  000CEA  C01D  F01F         	movff	___fttol@f1+2,??___fttol
  1885  000CEE  6A20               	clrf	(??___fttol+1)& (0+255),c
  1886  000CF0  6A21               	clrf	(??___fttol+2)& (0+255),c
  1887  000CF2  341C               	rlcf	___fttol@f1+1,w,c
  1888  000CF4  361F               	rlcf	??___fttol& (0+255),f,c
  1889  000CF6  E301               	bnc	u871
  1890  000CF8  8020               	bsf	(??___fttol+1)& (0+255),0,c
  1891  000CFA                     u871:
  1892  000CFA  501F               	movf	??___fttol,w,c
  1893  000CFC  6E29               	movwf	___fttol@exp1,c
  1894  000CFE  5029               	movf	___fttol@exp1,w,c
  1895  000D00  A4D8               	btfss	status,2,c
  1896  000D02  D009               	goto	l1344
  1897  000D04  0E00               	movlw	0
  1898  000D06  6E1B               	movwf	?___fttol,c
  1899  000D08  0E00               	movlw	0
  1900  000D0A  6E1C               	movwf	?___fttol+1,c
  1901  000D0C  0E00               	movlw	0
  1902  000D0E  6E1D               	movwf	?___fttol+2,c
  1903  000D10  0E00               	movlw	0
  1904  000D12  6E1E               	movwf	?___fttol+3,c
  1905  000D14  0012               	return	
  1906  000D16                     l1344:
  1907  000D16  0E17               	movlw	23
  1908  000D18  6E1F               	movwf	??___fttol& (0+255),c
  1909  000D1A  C01B  F020         	movff	___fttol@f1,??___fttol+1
  1910  000D1E  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
  1911  000D22  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
  1912  000D26  281F               	incf	??___fttol,w,c
  1913  000D28  6E23               	movwf	(??___fttol+4)& (0+255),c
  1914  000D2A  D004               	goto	u890
  1915  000D2C                     u895:
  1916  000D2C  90D8               	bcf	status,0,c
  1917  000D2E  3222               	rrcf	??___fttol+3,f,c
  1918  000D30  3221               	rrcf	??___fttol+2,f,c
  1919  000D32  3220               	rrcf	??___fttol+1,f,c
  1920  000D34                     u890:
  1921  000D34  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
  1922  000D36  D7FA               	goto	u895
  1923  000D38  5020               	movf	??___fttol+1,w,c
  1924  000D3A  6E24               	movwf	___fttol@sign1,c
  1925  000D3C  8E1C               	bsf	___fttol@f1+1,7,c
  1926  000D3E  0EFF               	movlw	255
  1927  000D40  161B               	andwf	___fttol@f1,f,c
  1928  000D42  0EFF               	movlw	255
  1929  000D44  161C               	andwf	___fttol@f1+1,f,c
  1930  000D46  0E00               	movlw	0
  1931  000D48  161D               	andwf	___fttol@f1+2,f,c
  1932  000D4A  501B               	movf	___fttol@f1,w,c
  1933  000D4C  6E25               	movwf	___fttol@lval,c
  1934  000D4E  501C               	movf	___fttol@f1+1,w,c
  1935  000D50  6E26               	movwf	___fttol@lval+1,c
  1936  000D52  501D               	movf	___fttol@f1+2,w,c
  1937  000D54  6E27               	movwf	___fttol@lval+2,c
  1938  000D56  6A28               	clrf	___fttol@lval+3,c
  1939  000D58  0E8E               	movlw	142
  1940  000D5A  5E29               	subwf	___fttol@exp1,f,c
  1941  000D5C  AE29               	btfss	___fttol@exp1,7,c
  1942  000D5E  D016               	goto	l1366
  1943  000D60  5029               	movf	___fttol@exp1,w,c
  1944  000D62  0A80               	xorlw	128
  1945  000D64  0F8F               	addlw	143
  1946  000D66  B0D8               	btfsc	status,0,c
  1947  000D68  D009               	goto	l1362
  1948  000D6A  0E00               	movlw	0
  1949  000D6C  6E1B               	movwf	?___fttol,c
  1950  000D6E  0E00               	movlw	0
  1951  000D70  6E1C               	movwf	?___fttol+1,c
  1952  000D72  0E00               	movlw	0
  1953  000D74  6E1D               	movwf	?___fttol+2,c
  1954  000D76  0E00               	movlw	0
  1955  000D78  6E1E               	movwf	?___fttol+3,c
  1956  000D7A  0012               	return	
  1957  000D7C                     l1362:
  1958  000D7C  90D8               	bcf	status,0,c
  1959  000D7E  3228               	rrcf	___fttol@lval+3,f,c
  1960  000D80  3227               	rrcf	___fttol@lval+2,f,c
  1961  000D82  3226               	rrcf	___fttol@lval+1,f,c
  1962  000D84  3225               	rrcf	___fttol@lval,f,c
  1963  000D86  3E29               	incfsz	___fttol@exp1,f,c
  1964  000D88  D7F9               	goto	l1362
  1965  000D8A  D015               	goto	l1376
  1966  000D8C                     l1366:
  1967  000D8C  0E17               	movlw	23
  1968  000D8E  6429               	cpfsgt	___fttol@exp1,c
  1969  000D90  D00F               	goto	l1374
  1970  000D92  0E00               	movlw	0
  1971  000D94  6E1B               	movwf	?___fttol,c
  1972  000D96  0E00               	movlw	0
  1973  000D98  6E1C               	movwf	?___fttol+1,c
  1974  000D9A  0E00               	movlw	0
  1975  000D9C  6E1D               	movwf	?___fttol+2,c
  1976  000D9E  0E00               	movlw	0
  1977  000DA0  6E1E               	movwf	?___fttol+3,c
  1978  000DA2  0012               	return	
  1979  000DA4                     l1372:
  1980  000DA4  90D8               	bcf	status,0,c
  1981  000DA6  3625               	rlcf	___fttol@lval,f,c
  1982  000DA8  3626               	rlcf	___fttol@lval+1,f,c
  1983  000DAA  3627               	rlcf	___fttol@lval+2,f,c
  1984  000DAC  3628               	rlcf	___fttol@lval+3,f,c
  1985  000DAE  0629               	decf	___fttol@exp1,f,c
  1986  000DB0                     l1374:
  1987  000DB0  5029               	movf	___fttol@exp1,w,c
  1988  000DB2  A4D8               	btfss	status,2,c
  1989  000DB4  D7F7               	goto	l1372
  1990  000DB6                     l1376:
  1991  000DB6  5024               	movf	___fttol@sign1,w,c
  1992  000DB8  B4D8               	btfsc	status,2,c
  1993  000DBA  D008               	goto	l1380
  1994  000DBC  1E28               	comf	___fttol@lval+3,f,c
  1995  000DBE  1E27               	comf	___fttol@lval+2,f,c
  1996  000DC0  1E26               	comf	___fttol@lval+1,f,c
  1997  000DC2  6C25               	negf	___fttol@lval,c
  1998  000DC4  0E00               	movlw	0
  1999  000DC6  2226               	addwfc	___fttol@lval+1,f,c
  2000  000DC8  2227               	addwfc	___fttol@lval+2,f,c
  2001  000DCA  2228               	addwfc	___fttol@lval+3,f,c
  2002  000DCC                     l1380:
  2003  000DCC  C025  F01B         	movff	___fttol@lval,?___fttol
  2004  000DD0  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
  2005  000DD4  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
  2006  000DD8  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
  2007  000DDC  0012               	return	
  2008  000DDE                     __end_of___fttol:
  2009                           	opt stack 0
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           prodh	equ	0xFF4
  2015                           prodl	equ	0xFF3
  2016                           intcon	equ	0xFF2
  2017                           indf2	equ	0xFDF
  2018                           postinc2	equ	0xFDE
  2019                           postdec2	equ	0xFDD
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function ___altoft *****************
  2025 ;; Defined at:
  2026 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  c               4   41[COMRAM] long 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  sign            1   50[COMRAM] unsigned char 
  2031 ;;  exp             1   49[COMRAM] unsigned char 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  3   41[COMRAM] float 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2041 ;;      Params:         4       0       0       0       0       0       0       0       0
  2042 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2043 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2044 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2045 ;;Total ram usage:       10 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    1
  2048 ;; This function calls:
  2049 ;;		___ftpack
  2050 ;; This function is called by:
  2051 ;;		_trunc
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text13
  2056  0011FA                     __ptext13:
  2057                           	opt stack 0
  2058  0011FA                     ___altoft:
  2059                           	opt stack 26
  2060                           
  2061                           ;incstack = 0
  2062  0011FA  0E00               	movlw	0
  2063  0011FC  6E33               	movwf	___altoft@sign,c
  2064  0011FE  0E8E               	movlw	142
  2065  001200  6E32               	movwf	___altoft@exp,c
  2066  001202  AE2D               	btfss	___altoft@c+3,7,c
  2067  001204  D011               	goto	l1332
  2068  001206  1E2D               	comf	___altoft@c+3,f,c
  2069  001208  1E2C               	comf	___altoft@c+2,f,c
  2070  00120A  1E2B               	comf	___altoft@c+1,f,c
  2071  00120C  6C2A               	negf	___altoft@c,c
  2072  00120E  0E00               	movlw	0
  2073  001210  222B               	addwfc	___altoft@c+1,f,c
  2074  001212  222C               	addwfc	___altoft@c+2,f,c
  2075  001214  222D               	addwfc	___altoft@c+3,f,c
  2076  001216  0E01               	movlw	1
  2077  001218  6E33               	movwf	___altoft@sign,c
  2078  00121A  D006               	goto	l1332
  2079  00121C                     l1330:
  2080  00121C  90D8               	bcf	status,0,c
  2081  00121E  322D               	rrcf	___altoft@c+3,f,c
  2082  001220  322C               	rrcf	___altoft@c+2,f,c
  2083  001222  322B               	rrcf	___altoft@c+1,f,c
  2084  001224  322A               	rrcf	___altoft@c,f,c
  2085  001226  2A32               	incf	___altoft@exp,f,c
  2086  001228                     l1332:
  2087  001228  0E00               	movlw	0
  2088  00122A  142A               	andwf	___altoft@c,w,c
  2089  00122C  6E2E               	movwf	??___altoft& (0+255),c
  2090  00122E  0E00               	movlw	0
  2091  001230  142B               	andwf	___altoft@c+1,w,c
  2092  001232  6E2F               	movwf	(??___altoft+1)& (0+255),c
  2093  001234  0E00               	movlw	0
  2094  001236  142C               	andwf	___altoft@c+2,w,c
  2095  001238  6E30               	movwf	(??___altoft+2)& (0+255),c
  2096  00123A  0EFF               	movlw	255
  2097  00123C  142D               	andwf	___altoft@c+3,w,c
  2098  00123E  6E31               	movwf	(??___altoft+3)& (0+255),c
  2099  001240  502E               	movf	??___altoft,w,c
  2100  001242  102F               	iorwf	??___altoft+1,w,c
  2101  001244  1030               	iorwf	??___altoft+2,w,c
  2102  001246  1031               	iorwf	??___altoft+3,w,c
  2103  001248  A4D8               	btfss	status,2,c
  2104  00124A  D7E8               	goto	l1330
  2105  00124C  C02A  F001         	movff	___altoft@c,___ftpack@arg
  2106  001250  C02B  F002         	movff	___altoft@c+1,___ftpack@arg+1
  2107  001254  C02C  F003         	movff	___altoft@c+2,___ftpack@arg+2
  2108  001258  C032  F004         	movff	___altoft@exp,___ftpack@exp
  2109  00125C  C033  F005         	movff	___altoft@sign,___ftpack@sign
  2110  001260  ECDC  F007         	call	___ftpack	;wreg free
  2111  001264  C001  F02A         	movff	?___ftpack,?___altoft
  2112  001268  C002  F02B         	movff	?___ftpack+1,?___altoft+1
  2113  00126C  C003  F02C         	movff	?___ftpack+2,?___altoft+2
  2114  001270  0012               	return	
  2115  001272                     __end_of___altoft:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           indf2	equ	0xFDF
  2125                           postinc2	equ	0xFDE
  2126                           postdec2	equ	0xFDD
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function ___ftneg *****************
  2132 ;; Defined at:
  2133 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  f1              3   23[COMRAM] float 
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  3   23[COMRAM] float 
  2140 ;; Registers used:
  2141 ;;		wreg, status,2, status,0
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2147 ;;      Params:         3       0       0       0       0       0       0       0       0
  2148 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2150 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2151 ;;Total ram usage:        3 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; This function calls:
  2154 ;;		Nothing
  2155 ;; This function is called by:
  2156 ;;		_fmod
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text14
  2161  001382                     __ptext14:
  2162                           	opt stack 0
  2163  001382                     ___ftneg:
  2164                           	opt stack 28
  2165                           
  2166                           ;incstack = 0
  2167  001382  5018               	movf	___ftneg@f1,w,c
  2168  001384  1019               	iorwf	___ftneg@f1+1,w,c
  2169  001386  101A               	iorwf	___ftneg@f1+2,w,c
  2170  001388  B4D8               	btfsc	status,2,c
  2171  00138A  D006               	goto	l420
  2172  00138C  0E00               	movlw	0
  2173  00138E  1A18               	xorwf	___ftneg@f1,f,c
  2174  001390  0E00               	movlw	0
  2175  001392  1A19               	xorwf	___ftneg@f1+1,f,c
  2176  001394  0E80               	movlw	128
  2177  001396  1A1A               	xorwf	___ftneg@f1+2,f,c
  2178  001398                     l420:
  2179  001398  C018  F018         	movff	___ftneg@f1,?___ftneg
  2180  00139C  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
  2181  0013A0  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
  2182  0013A4  0012               	return		;funcret
  2183  0013A6                     __end_of___ftneg:
  2184                           	opt stack 0
  2185                           tblptru	equ	0xFF8
  2186                           tblptrh	equ	0xFF7
  2187                           tblptrl	equ	0xFF6
  2188                           tablat	equ	0xFF5
  2189                           prodh	equ	0xFF4
  2190                           prodl	equ	0xFF3
  2191                           intcon	equ	0xFF2
  2192                           indf2	equ	0xFDF
  2193                           postinc2	equ	0xFDE
  2194                           postdec2	equ	0xFDD
  2195                           fsr2h	equ	0xFDA
  2196                           fsr2l	equ	0xFD9
  2197                           status	equ	0xFD8
  2198                           
  2199 ;; *************** function ___ftmul *****************
  2200 ;; Defined at:
  2201 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;  f1              3    8[COMRAM] float 
  2204 ;;  f2              3   11[COMRAM] float 
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  2207 ;;  sign            1   22[COMRAM] unsigned char 
  2208 ;;  cntr            1   21[COMRAM] unsigned char 
  2209 ;;  exp             1   17[COMRAM] unsigned char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  3    8[COMRAM] float 
  2212 ;; Registers used:
  2213 ;;		wreg, status,2, status,0, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2219 ;;      Params:         6       0       0       0       0       0       0       0       0
  2220 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2221 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2222 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2223 ;;Total ram usage:       15 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    1
  2226 ;; This function calls:
  2227 ;;		___ftpack
  2228 ;; This function is called by:
  2229 ;;		_fmod
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text15
  2234  000DDE                     __ptext15:
  2235                           	opt stack 0
  2236  000DDE                     ___ftmul:
  2237                           	opt stack 27
  2238                           
  2239                           ;incstack = 0
  2240  000DDE  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  2241  000DE2  6A10               	clrf	(??___ftmul+1)& (0+255),c
  2242  000DE4  6A11               	clrf	(??___ftmul+2)& (0+255),c
  2243  000DE6  340A               	rlcf	___ftmul@f1+1,w,c
  2244  000DE8  360F               	rlcf	??___ftmul& (0+255),f,c
  2245  000DEA  E301               	bnc	u1231
  2246  000DEC  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  2247  000DEE                     u1231:
  2248  000DEE  500F               	movf	??___ftmul,w,c
  2249  000DF0  6E12               	movwf	___ftmul@exp,c
  2250  000DF2  5012               	movf	___ftmul@exp,w,c
  2251  000DF4  A4D8               	btfss	status,2,c
  2252  000DF6  D007               	goto	l1522
  2253  000DF8  0E00               	movlw	0
  2254  000DFA  6E09               	movwf	?___ftmul,c
  2255  000DFC  0E00               	movlw	0
  2256  000DFE  6E0A               	movwf	?___ftmul+1,c
  2257  000E00  0E00               	movlw	0
  2258  000E02  6E0B               	movwf	?___ftmul+2,c
  2259  000E04  0012               	return	
  2260  000E06                     l1522:
  2261  000E06  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  2262  000E0A  6A10               	clrf	(??___ftmul+1)& (0+255),c
  2263  000E0C  6A11               	clrf	(??___ftmul+2)& (0+255),c
  2264  000E0E  340D               	rlcf	___ftmul@f2+1,w,c
  2265  000E10  360F               	rlcf	??___ftmul& (0+255),f,c
  2266  000E12  E301               	bnc	u1251
  2267  000E14  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  2268  000E16                     u1251:
  2269  000E16  500F               	movf	??___ftmul,w,c
  2270  000E18  6E17               	movwf	___ftmul@sign,c
  2271  000E1A  5017               	movf	___ftmul@sign,w,c
  2272  000E1C  A4D8               	btfss	status,2,c
  2273  000E1E  D007               	goto	l1528
  2274  000E20  0E00               	movlw	0
  2275  000E22  6E09               	movwf	?___ftmul,c
  2276  000E24  0E00               	movlw	0
  2277  000E26  6E0A               	movwf	?___ftmul+1,c
  2278  000E28  0E00               	movlw	0
  2279  000E2A  6E0B               	movwf	?___ftmul+2,c
  2280  000E2C  0012               	return	
  2281  000E2E                     l1528:
  2282  000E2E  5017               	movf	___ftmul@sign,w,c
  2283  000E30  0F7B               	addlw	123
  2284  000E32  2612               	addwf	___ftmul@exp,f,c
  2285  000E34  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  2286  000E38  500E               	movf	___ftmul@f2+2,w,c
  2287  000E3A  1A17               	xorwf	___ftmul@sign,f,c
  2288  000E3C  0E80               	movlw	128
  2289  000E3E  1617               	andwf	___ftmul@sign,f,c
  2290  000E40  8E0A               	bsf	___ftmul@f1+1,7,c
  2291  000E42  8E0D               	bsf	___ftmul@f2+1,7,c
  2292  000E44  0EFF               	movlw	255
  2293  000E46  160C               	andwf	___ftmul@f2,f,c
  2294  000E48  0EFF               	movlw	255
  2295  000E4A  160D               	andwf	___ftmul@f2+1,f,c
  2296  000E4C  0E00               	movlw	0
  2297  000E4E  160E               	andwf	___ftmul@f2+2,f,c
  2298  000E50  0E00               	movlw	0
  2299  000E52  6E13               	movwf	___ftmul@f3_as_product,c
  2300  000E54  0E00               	movlw	0
  2301  000E56  6E14               	movwf	___ftmul@f3_as_product+1,c
  2302  000E58  0E00               	movlw	0
  2303  000E5A  6E15               	movwf	___ftmul@f3_as_product+2,c
  2304  000E5C  0E07               	movlw	7
  2305  000E5E  6E16               	movwf	___ftmul@cntr,c
  2306  000E60                     l1542:
  2307  000E60  A009               	btfss	___ftmul@f1,0,c
  2308  000E62  D006               	goto	l1546
  2309  000E64  500C               	movf	___ftmul@f2,w,c
  2310  000E66  2613               	addwf	___ftmul@f3_as_product,f,c
  2311  000E68  500D               	movf	___ftmul@f2+1,w,c
  2312  000E6A  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  2313  000E6C  500E               	movf	___ftmul@f2+2,w,c
  2314  000E6E  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  2315  000E70                     l1546:
  2316  000E70  90D8               	bcf	status,0,c
  2317  000E72  320B               	rrcf	___ftmul@f1+2,f,c
  2318  000E74  320A               	rrcf	___ftmul@f1+1,f,c
  2319  000E76  3209               	rrcf	___ftmul@f1,f,c
  2320  000E78  90D8               	bcf	status,0,c
  2321  000E7A  360C               	rlcf	___ftmul@f2,f,c
  2322  000E7C  360D               	rlcf	___ftmul@f2+1,f,c
  2323  000E7E  360E               	rlcf	___ftmul@f2+2,f,c
  2324  000E80  2E16               	decfsz	___ftmul@cntr,f,c
  2325  000E82  D7EE               	goto	l1542
  2326  000E84  0E09               	movlw	9
  2327  000E86  6E16               	movwf	___ftmul@cntr,c
  2328  000E88                     l1552:
  2329  000E88  A009               	btfss	___ftmul@f1,0,c
  2330  000E8A  D006               	goto	l1556
  2331  000E8C  500C               	movf	___ftmul@f2,w,c
  2332  000E8E  2613               	addwf	___ftmul@f3_as_product,f,c
  2333  000E90  500D               	movf	___ftmul@f2+1,w,c
  2334  000E92  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  2335  000E94  500E               	movf	___ftmul@f2+2,w,c
  2336  000E96  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  2337  000E98                     l1556:
  2338  000E98  90D8               	bcf	status,0,c
  2339  000E9A  320B               	rrcf	___ftmul@f1+2,f,c
  2340  000E9C  320A               	rrcf	___ftmul@f1+1,f,c
  2341  000E9E  3209               	rrcf	___ftmul@f1,f,c
  2342  000EA0  90D8               	bcf	status,0,c
  2343  000EA2  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  2344  000EA4  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  2345  000EA6  3213               	rrcf	___ftmul@f3_as_product,f,c
  2346  000EA8  2E16               	decfsz	___ftmul@cntr,f,c
  2347  000EAA  D7EE               	goto	l1552
  2348  000EAC  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2349  000EB0  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2350  000EB4  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2351  000EB8  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  2352  000EBC  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  2353  000EC0  ECDC  F007         	call	___ftpack	;wreg free
  2354  000EC4  C001  F009         	movff	?___ftpack,?___ftmul
  2355  000EC8  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  2356  000ECC  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  2357  000ED0  0012               	return	
  2358  000ED2                     __end_of___ftmul:
  2359                           	opt stack 0
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           prodh	equ	0xFF4
  2365                           prodl	equ	0xFF3
  2366                           intcon	equ	0xFF2
  2367                           indf2	equ	0xFDF
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function ___ftdiv *****************
  2375 ;; Defined at:
  2376 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  f1              3   11[COMRAM] float 
  2379 ;;  f2              3   14[COMRAM] float 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;  f3              3   21[COMRAM] float 
  2382 ;;  sign            1   25[COMRAM] unsigned char 
  2383 ;;  exp             1   24[COMRAM] unsigned char 
  2384 ;;  cntr            1   20[COMRAM] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  3   11[COMRAM] float 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2394 ;;      Params:         6       0       0       0       0       0       0       0       0
  2395 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2396 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2397 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2398 ;;Total ram usage:       15 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    1
  2401 ;; This function calls:
  2402 ;;		___ftpack
  2403 ;; This function is called by:
  2404 ;;		_adc_output
  2405 ;;		_fmod
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text16
  2410  000ED2                     __ptext16:
  2411                           	opt stack 0
  2412  000ED2                     ___ftdiv:
  2413                           	opt stack 27
  2414                           
  2415                           ;incstack = 0
  2416  000ED2  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  2417  000ED6  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  2418  000ED8  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  2419  000EDA  340D               	rlcf	___ftdiv@f1+1,w,c
  2420  000EDC  3612               	rlcf	??___ftdiv& (0+255),f,c
  2421  000EDE  E301               	bnc	u1181
  2422  000EE0  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  2423  000EE2                     u1181:
  2424  000EE2  5012               	movf	??___ftdiv,w,c
  2425  000EE4  6E19               	movwf	___ftdiv@exp,c
  2426  000EE6  5019               	movf	___ftdiv@exp,w,c
  2427  000EE8  A4D8               	btfss	status,2,c
  2428  000EEA  D007               	goto	l1476
  2429  000EEC  0E00               	movlw	0
  2430  000EEE  6E0C               	movwf	?___ftdiv,c
  2431  000EF0  0E00               	movlw	0
  2432  000EF2  6E0D               	movwf	?___ftdiv+1,c
  2433  000EF4  0E00               	movlw	0
  2434  000EF6  6E0E               	movwf	?___ftdiv+2,c
  2435  000EF8  0012               	return	
  2436  000EFA                     l1476:
  2437  000EFA  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  2438  000EFE  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  2439  000F00  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  2440  000F02  3410               	rlcf	___ftdiv@f2+1,w,c
  2441  000F04  3612               	rlcf	??___ftdiv& (0+255),f,c
  2442  000F06  E301               	bnc	u1201
  2443  000F08  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  2444  000F0A                     u1201:
  2445  000F0A  5012               	movf	??___ftdiv,w,c
  2446  000F0C  6E1A               	movwf	___ftdiv@sign,c
  2447  000F0E  501A               	movf	___ftdiv@sign,w,c
  2448  000F10  A4D8               	btfss	status,2,c
  2449  000F12  D007               	goto	l1482
  2450  000F14  0E00               	movlw	0
  2451  000F16  6E0C               	movwf	?___ftdiv,c
  2452  000F18  0E00               	movlw	0
  2453  000F1A  6E0D               	movwf	?___ftdiv+1,c
  2454  000F1C  0E00               	movlw	0
  2455  000F1E  6E0E               	movwf	?___ftdiv+2,c
  2456  000F20  0012               	return	
  2457  000F22                     l1482:
  2458  000F22  0E00               	movlw	0
  2459  000F24  6E16               	movwf	___ftdiv@f3,c
  2460  000F26  0E00               	movlw	0
  2461  000F28  6E17               	movwf	___ftdiv@f3+1,c
  2462  000F2A  0E00               	movlw	0
  2463  000F2C  6E18               	movwf	___ftdiv@f3+2,c
  2464  000F2E  501A               	movf	___ftdiv@sign,w,c
  2465  000F30  0F89               	addlw	137
  2466  000F32  5E19               	subwf	___ftdiv@exp,f,c
  2467  000F34  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  2468  000F38  5011               	movf	___ftdiv@f2+2,w,c
  2469  000F3A  1A1A               	xorwf	___ftdiv@sign,f,c
  2470  000F3C  0E80               	movlw	128
  2471  000F3E  161A               	andwf	___ftdiv@sign,f,c
  2472  000F40  8E0D               	bsf	___ftdiv@f1+1,7,c
  2473  000F42  0EFF               	movlw	255
  2474  000F44  160C               	andwf	___ftdiv@f1,f,c
  2475  000F46  0EFF               	movlw	255
  2476  000F48  160D               	andwf	___ftdiv@f1+1,f,c
  2477  000F4A  0E00               	movlw	0
  2478  000F4C  160E               	andwf	___ftdiv@f1+2,f,c
  2479  000F4E  8E10               	bsf	___ftdiv@f2+1,7,c
  2480  000F50  0EFF               	movlw	255
  2481  000F52  160F               	andwf	___ftdiv@f2,f,c
  2482  000F54  0EFF               	movlw	255
  2483  000F56  1610               	andwf	___ftdiv@f2+1,f,c
  2484  000F58  0E00               	movlw	0
  2485  000F5A  1611               	andwf	___ftdiv@f2+2,f,c
  2486  000F5C  0E18               	movlw	24
  2487  000F5E  6E15               	movwf	___ftdiv@cntr,c
  2488  000F60                     l1502:
  2489  000F60  90D8               	bcf	status,0,c
  2490  000F62  3616               	rlcf	___ftdiv@f3,f,c
  2491  000F64  3617               	rlcf	___ftdiv@f3+1,f,c
  2492  000F66  3618               	rlcf	___ftdiv@f3+2,f,c
  2493  000F68  500F               	movf	___ftdiv@f2,w,c
  2494  000F6A  5C0C               	subwf	___ftdiv@f1,w,c
  2495  000F6C  5010               	movf	___ftdiv@f2+1,w,c
  2496  000F6E  580D               	subwfb	___ftdiv@f1+1,w,c
  2497  000F70  5011               	movf	___ftdiv@f2+2,w,c
  2498  000F72  580E               	subwfb	___ftdiv@f1+2,w,c
  2499  000F74  A0D8               	btfss	status,0,c
  2500  000F76  D007               	goto	l398
  2501  000F78  500F               	movf	___ftdiv@f2,w,c
  2502  000F7A  5E0C               	subwf	___ftdiv@f1,f,c
  2503  000F7C  5010               	movf	___ftdiv@f2+1,w,c
  2504  000F7E  5A0D               	subwfb	___ftdiv@f1+1,f,c
  2505  000F80  5011               	movf	___ftdiv@f2+2,w,c
  2506  000F82  5A0E               	subwfb	___ftdiv@f1+2,f,c
  2507  000F84  8016               	bsf	___ftdiv@f3,0,c
  2508  000F86                     l398:
  2509  000F86  90D8               	bcf	status,0,c
  2510  000F88  360C               	rlcf	___ftdiv@f1,f,c
  2511  000F8A  360D               	rlcf	___ftdiv@f1+1,f,c
  2512  000F8C  360E               	rlcf	___ftdiv@f1+2,f,c
  2513  000F8E  2E15               	decfsz	___ftdiv@cntr,f,c
  2514  000F90  D7E7               	goto	l1502
  2515  000F92  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  2516  000F96  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2517  000F9A  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2518  000F9E  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  2519  000FA2  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  2520  000FA6  ECDC  F007         	call	___ftpack	;wreg free
  2521  000FAA  C001  F00C         	movff	?___ftpack,?___ftdiv
  2522  000FAE  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  2523  000FB2  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  2524  000FB6  0012               	return	
  2525  000FB8                     __end_of___ftdiv:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           intcon	equ	0xFF2
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           postdec2	equ	0xFDD
  2537                           fsr2h	equ	0xFDA
  2538                           fsr2l	equ	0xFD9
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function ___ftadd *****************
  2542 ;; Defined at:
  2543 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  f1              3   26[COMRAM] float 
  2546 ;;  f2              3   29[COMRAM] float 
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;  exp1            1   37[COMRAM] unsigned char 
  2549 ;;  exp2            1   36[COMRAM] unsigned char 
  2550 ;;  sign            1   35[COMRAM] unsigned char 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  3   26[COMRAM] float 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2, status,0, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2560 ;;      Params:         6       0       0       0       0       0       0       0       0
  2561 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2562 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2563 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2564 ;;Total ram usage:       12 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    1
  2567 ;; This function calls:
  2568 ;;		___ftpack
  2569 ;; This function is called by:
  2570 ;;		_fmod
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text17
  2575  0009F6                     __ptext17:
  2576                           	opt stack 0
  2577  0009F6                     ___ftadd:
  2578                           	opt stack 27
  2579                           
  2580                           ;incstack = 0
  2581  0009F6  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
  2582  0009FA  6A22               	clrf	(??___ftadd+1)& (0+255),c
  2583  0009FC  6A23               	clrf	(??___ftadd+2)& (0+255),c
  2584  0009FE  341C               	rlcf	___ftadd@f1+1,w,c
  2585  000A00  3621               	rlcf	??___ftadd& (0+255),f,c
  2586  000A02  E301               	bnc	u971
  2587  000A04  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  2588  000A06                     u971:
  2589  000A06  5021               	movf	??___ftadd,w,c
  2590  000A08  6E26               	movwf	___ftadd@exp1,c
  2591  000A0A  C020  F021         	movff	___ftadd@f2+2,??___ftadd
  2592  000A0E  6A22               	clrf	(??___ftadd+1)& (0+255),c
  2593  000A10  6A23               	clrf	(??___ftadd+2)& (0+255),c
  2594  000A12  341F               	rlcf	___ftadd@f2+1,w,c
  2595  000A14  3621               	rlcf	??___ftadd& (0+255),f,c
  2596  000A16  E301               	bnc	u981
  2597  000A18  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  2598  000A1A                     u981:
  2599  000A1A  5021               	movf	??___ftadd,w,c
  2600  000A1C  6E25               	movwf	___ftadd@exp2,c
  2601  000A1E  5026               	movf	___ftadd@exp1,w,c
  2602  000A20  B4D8               	btfsc	status,2,c
  2603  000A22  D00B               	goto	l363
  2604  000A24  5025               	movf	___ftadd@exp2,w,c
  2605  000A26  5C26               	subwf	___ftadd@exp1,w,c
  2606  000A28  B0D8               	btfsc	status,0,c
  2607  000A2A  D00E               	goto	l1408
  2608  000A2C  5026               	movf	___ftadd@exp1,w,c
  2609  000A2E  0800               	sublw	0
  2610  000A30  2425               	addwf	___ftadd@exp2,w,c
  2611  000A32  6E21               	movwf	??___ftadd& (0+255),c
  2612  000A34  0E18               	movlw	24
  2613  000A36  6421               	cpfsgt	??___ftadd,c
  2614  000A38  D007               	goto	l1408
  2615  000A3A                     l363:
  2616  000A3A  C01E  F01B         	movff	___ftadd@f2,?___ftadd
  2617  000A3E  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
  2618  000A42  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
  2619  000A46  0012               	return	
  2620  000A48                     l1408:
  2621  000A48  5025               	movf	___ftadd@exp2,w,c
  2622  000A4A  B4D8               	btfsc	status,2,c
  2623  000A4C  D00B               	goto	l367
  2624  000A4E  5026               	movf	___ftadd@exp1,w,c
  2625  000A50  5C25               	subwf	___ftadd@exp2,w,c
  2626  000A52  B0D8               	btfsc	status,0,c
  2627  000A54  D00E               	goto	l1414
  2628  000A56  5025               	movf	___ftadd@exp2,w,c
  2629  000A58  0800               	sublw	0
  2630  000A5A  2426               	addwf	___ftadd@exp1,w,c
  2631  000A5C  6E21               	movwf	??___ftadd& (0+255),c
  2632  000A5E  0E18               	movlw	24
  2633  000A60  6421               	cpfsgt	??___ftadd,c
  2634  000A62  D007               	goto	l1414
  2635  000A64                     l367:
  2636  000A64  C01B  F01B         	movff	___ftadd@f1,?___ftadd
  2637  000A68  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
  2638  000A6C  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
  2639  000A70  0012               	return	
  2640  000A72                     l1414:
  2641  000A72  0E06               	movlw	6
  2642  000A74  6E24               	movwf	___ftadd@sign,c
  2643  000A76  BE1D               	btfsc	___ftadd@f1+2,7,c
  2644  000A78  8E24               	bsf	___ftadd@sign,7,c
  2645  000A7A  BE20               	btfsc	___ftadd@f2+2,7,c
  2646  000A7C  8C24               	bsf	___ftadd@sign,6,c
  2647  000A7E  8E1C               	bsf	___ftadd@f1+1,7,c
  2648  000A80  0EFF               	movlw	255
  2649  000A82  161B               	andwf	___ftadd@f1,f,c
  2650  000A84  0EFF               	movlw	255
  2651  000A86  161C               	andwf	___ftadd@f1+1,f,c
  2652  000A88  0E00               	movlw	0
  2653  000A8A  161D               	andwf	___ftadd@f1+2,f,c
  2654  000A8C  8E1F               	bsf	___ftadd@f2+1,7,c
  2655  000A8E  0EFF               	movlw	255
  2656  000A90  161E               	andwf	___ftadd@f2,f,c
  2657  000A92  0EFF               	movlw	255
  2658  000A94  161F               	andwf	___ftadd@f2+1,f,c
  2659  000A96  0E00               	movlw	0
  2660  000A98  1620               	andwf	___ftadd@f2+2,f,c
  2661  000A9A  5025               	movf	___ftadd@exp2,w,c
  2662  000A9C  5C26               	subwf	___ftadd@exp1,w,c
  2663  000A9E  B0D8               	btfsc	status,0,c
  2664  000AA0  D01B               	goto	l1440
  2665  000AA2                     l1430:
  2666  000AA2  90D8               	bcf	status,0,c
  2667  000AA4  361E               	rlcf	___ftadd@f2,f,c
  2668  000AA6  361F               	rlcf	___ftadd@f2+1,f,c
  2669  000AA8  3620               	rlcf	___ftadd@f2+2,f,c
  2670  000AAA  0625               	decf	___ftadd@exp2,f,c
  2671  000AAC  5026               	movf	___ftadd@exp1,w,c
  2672  000AAE  1825               	xorwf	___ftadd@exp2,w,c
  2673  000AB0  B4D8               	btfsc	status,2,c
  2674  000AB2  D00D               	goto	l1438
  2675  000AB4  0624               	decf	___ftadd@sign,f,c
  2676  000AB6  C024  F021         	movff	___ftadd@sign,??___ftadd
  2677  000ABA  0E07               	movlw	7
  2678  000ABC  1621               	andwf	??___ftadd,f,c
  2679  000ABE  B4D8               	btfsc	status,2,c
  2680  000AC0  D006               	goto	l1438
  2681  000AC2  D7EF               	goto	l1430
  2682  000AC4                     l1436:
  2683  000AC4  90D8               	bcf	status,0,c
  2684  000AC6  321D               	rrcf	___ftadd@f1+2,f,c
  2685  000AC8  321C               	rrcf	___ftadd@f1+1,f,c
  2686  000ACA  321B               	rrcf	___ftadd@f1,f,c
  2687  000ACC  2A26               	incf	___ftadd@exp1,f,c
  2688  000ACE                     l1438:
  2689  000ACE  5025               	movf	___ftadd@exp2,w,c
  2690  000AD0  1826               	xorwf	___ftadd@exp1,w,c
  2691  000AD2  B4D8               	btfsc	status,2,c
  2692  000AD4  D01F               	goto	l378
  2693  000AD6  D7F6               	goto	l1436
  2694  000AD8                     l1440:
  2695  000AD8  5026               	movf	___ftadd@exp1,w,c
  2696  000ADA  5C25               	subwf	___ftadd@exp2,w,c
  2697  000ADC  B0D8               	btfsc	status,0,c
  2698  000ADE  D01A               	goto	l378
  2699  000AE0                     l1442:
  2700  000AE0  90D8               	bcf	status,0,c
  2701  000AE2  361B               	rlcf	___ftadd@f1,f,c
  2702  000AE4  361C               	rlcf	___ftadd@f1+1,f,c
  2703  000AE6  361D               	rlcf	___ftadd@f1+2,f,c
  2704  000AE8  0626               	decf	___ftadd@exp1,f,c
  2705  000AEA  5026               	movf	___ftadd@exp1,w,c
  2706  000AEC  1825               	xorwf	___ftadd@exp2,w,c
  2707  000AEE  B4D8               	btfsc	status,2,c
  2708  000AF0  D00D               	goto	l1450
  2709  000AF2  0624               	decf	___ftadd@sign,f,c
  2710  000AF4  C024  F021         	movff	___ftadd@sign,??___ftadd
  2711  000AF8  0E07               	movlw	7
  2712  000AFA  1621               	andwf	??___ftadd,f,c
  2713  000AFC  B4D8               	btfsc	status,2,c
  2714  000AFE  D006               	goto	l1450
  2715  000B00  D7EF               	goto	l1442
  2716  000B02                     l1448:
  2717  000B02  90D8               	bcf	status,0,c
  2718  000B04  3220               	rrcf	___ftadd@f2+2,f,c
  2719  000B06  321F               	rrcf	___ftadd@f2+1,f,c
  2720  000B08  321E               	rrcf	___ftadd@f2,f,c
  2721  000B0A  2A25               	incf	___ftadd@exp2,f,c
  2722  000B0C                     l1450:
  2723  000B0C  5025               	movf	___ftadd@exp2,w,c
  2724  000B0E  1826               	xorwf	___ftadd@exp1,w,c
  2725  000B10  A4D8               	btfss	status,2,c
  2726  000B12  D7F7               	goto	l1448
  2727  000B14                     l378:
  2728  000B14  AE24               	btfss	___ftadd@sign,7,c
  2729  000B16  D00C               	goto	l387
  2730  000B18  0EFF               	movlw	255
  2731  000B1A  1A1B               	xorwf	___ftadd@f1,f,c
  2732  000B1C  0EFF               	movlw	255
  2733  000B1E  1A1C               	xorwf	___ftadd@f1+1,f,c
  2734  000B20  0EFF               	movlw	255
  2735  000B22  1A1D               	xorwf	___ftadd@f1+2,f,c
  2736  000B24  0E01               	movlw	1
  2737  000B26  261B               	addwf	___ftadd@f1,f,c
  2738  000B28  0E00               	movlw	0
  2739  000B2A  221C               	addwfc	___ftadd@f1+1,f,c
  2740  000B2C  0E00               	movlw	0
  2741  000B2E  221D               	addwfc	___ftadd@f1+2,f,c
  2742  000B30                     l387:
  2743  000B30  AC24               	btfss	___ftadd@sign,6,c
  2744  000B32  D00C               	goto	l1456
  2745  000B34  0EFF               	movlw	255
  2746  000B36  1A1E               	xorwf	___ftadd@f2,f,c
  2747  000B38  0EFF               	movlw	255
  2748  000B3A  1A1F               	xorwf	___ftadd@f2+1,f,c
  2749  000B3C  0EFF               	movlw	255
  2750  000B3E  1A20               	xorwf	___ftadd@f2+2,f,c
  2751  000B40  0E01               	movlw	1
  2752  000B42  261E               	addwf	___ftadd@f2,f,c
  2753  000B44  0E00               	movlw	0
  2754  000B46  221F               	addwfc	___ftadd@f2+1,f,c
  2755  000B48  0E00               	movlw	0
  2756  000B4A  2220               	addwfc	___ftadd@f2+2,f,c
  2757  000B4C                     l1456:
  2758  000B4C  0E00               	movlw	0
  2759  000B4E  6E24               	movwf	___ftadd@sign,c
  2760  000B50  501B               	movf	___ftadd@f1,w,c
  2761  000B52  261E               	addwf	___ftadd@f2,f,c
  2762  000B54  501C               	movf	___ftadd@f1+1,w,c
  2763  000B56  221F               	addwfc	___ftadd@f2+1,f,c
  2764  000B58  501D               	movf	___ftadd@f1+2,w,c
  2765  000B5A  2220               	addwfc	___ftadd@f2+2,f,c
  2766  000B5C  AE20               	btfss	___ftadd@f2+2,7,c
  2767  000B5E  D00E               	goto	l1466
  2768  000B60  0EFF               	movlw	255
  2769  000B62  1A1E               	xorwf	___ftadd@f2,f,c
  2770  000B64  0EFF               	movlw	255
  2771  000B66  1A1F               	xorwf	___ftadd@f2+1,f,c
  2772  000B68  0EFF               	movlw	255
  2773  000B6A  1A20               	xorwf	___ftadd@f2+2,f,c
  2774  000B6C  0E01               	movlw	1
  2775  000B6E  261E               	addwf	___ftadd@f2,f,c
  2776  000B70  0E00               	movlw	0
  2777  000B72  221F               	addwfc	___ftadd@f2+1,f,c
  2778  000B74  0E00               	movlw	0
  2779  000B76  2220               	addwfc	___ftadd@f2+2,f,c
  2780  000B78  0E01               	movlw	1
  2781  000B7A  6E24               	movwf	___ftadd@sign,c
  2782  000B7C                     l1466:
  2783  000B7C  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
  2784  000B80  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  2785  000B84  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  2786  000B88  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
  2787  000B8C  C024  F005         	movff	___ftadd@sign,___ftpack@sign
  2788  000B90  ECDC  F007         	call	___ftpack	;wreg free
  2789  000B94  C001  F01B         	movff	?___ftpack,?___ftadd
  2790  000B98  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
  2791  000B9C  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
  2792  000BA0  0012               	return	
  2793  000BA2                     __end_of___ftadd:
  2794                           	opt stack 0
  2795                           tblptru	equ	0xFF8
  2796                           tblptrh	equ	0xFF7
  2797                           tblptrl	equ	0xFF6
  2798                           tablat	equ	0xFF5
  2799                           prodh	equ	0xFF4
  2800                           prodl	equ	0xFF3
  2801                           intcon	equ	0xFF2
  2802                           indf2	equ	0xFDF
  2803                           postinc2	equ	0xFDE
  2804                           postdec2	equ	0xFDD
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function ___wmul *****************
  2810 ;; Defined at:
  2811 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  multiplier      2    0[COMRAM] unsigned int 
  2814 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  product         2    4[COMRAM] unsigned int 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  2    0[COMRAM] unsigned int 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, status,0, prodl, prodh
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2826 ;;      Params:         4       0       0       0       0       0       0       0       0
  2827 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2829 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2830 ;;Total ram usage:        6 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_adc_output
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text18
  2840  00135C                     __ptext18:
  2841                           	opt stack 0
  2842  00135C                     ___wmul:
  2843                           	opt stack 29
  2844                           
  2845                           ;incstack = 0
  2846  00135C  5001               	movf	___wmul@multiplier,w,c
  2847  00135E  0203               	mulwf	___wmul@multiplicand,c
  2848  001360  CFF3 F005          	movff	prodl,___wmul@product
  2849  001364  CFF4 F006          	movff	prodh,___wmul@product+1
  2850  001368  5001               	movf	___wmul@multiplier,w,c
  2851  00136A  0204               	mulwf	___wmul@multiplicand+1,c
  2852  00136C  50F3               	movf	prodl,w,c
  2853  00136E  2606               	addwf	___wmul@product+1,f,c
  2854  001370  5002               	movf	___wmul@multiplier+1,w,c
  2855  001372  0203               	mulwf	___wmul@multiplicand,c
  2856  001374  50F3               	movf	prodl,w,c
  2857  001376  2606               	addwf	___wmul@product+1,f,c
  2858  001378  C005  F001         	movff	___wmul@product,?___wmul
  2859  00137C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2860  001380  0012               	return	
  2861  001382                     __end_of___wmul:
  2862                           	opt stack 0
  2863                           tblptru	equ	0xFF8
  2864                           tblptrh	equ	0xFF7
  2865                           tblptrl	equ	0xFF6
  2866                           tablat	equ	0xFF5
  2867                           prodh	equ	0xFF4
  2868                           prodl	equ	0xFF3
  2869                           intcon	equ	0xFF2
  2870                           indf2	equ	0xFDF
  2871                           postinc2	equ	0xFDE
  2872                           postdec2	equ	0xFDD
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function ___lwtoft *****************
  2878 ;; Defined at:
  2879 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwtoft.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  c               2    8[COMRAM] unsigned int 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  3    8[COMRAM] float 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, status,0, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2893 ;;      Params:         3       0       0       0       0       0       0       0       0
  2894 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2896 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2897 ;;Total ram usage:        3 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    1
  2900 ;; This function calls:
  2901 ;;		___ftpack
  2902 ;; This function is called by:
  2903 ;;		_adc_output
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text19
  2908  0013A6                     __ptext19:
  2909                           	opt stack 0
  2910  0013A6                     ___lwtoft:
  2911                           	opt stack 28
  2912                           
  2913                           ;incstack = 0
  2914  0013A6  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  2915  0013AA  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  2916  0013AE  6A03               	clrf	___ftpack@arg+2,c
  2917  0013B0  0E8E               	movlw	142
  2918  0013B2  6E04               	movwf	___ftpack@exp,c
  2919  0013B4  0E00               	movlw	0
  2920  0013B6  6E05               	movwf	___ftpack@sign,c
  2921  0013B8  ECDC  F007         	call	___ftpack	;wreg free
  2922  0013BC  C001  F009         	movff	?___ftpack,?___lwtoft
  2923  0013C0  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  2924  0013C4  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  2925  0013C8  0012               	return	
  2926  0013CA                     __end_of___lwtoft:
  2927                           	opt stack 0
  2928                           tblptru	equ	0xFF8
  2929                           tblptrh	equ	0xFF7
  2930                           tblptrl	equ	0xFF6
  2931                           tablat	equ	0xFF5
  2932                           prodh	equ	0xFF4
  2933                           prodl	equ	0xFF3
  2934                           intcon	equ	0xFF2
  2935                           indf2	equ	0xFDF
  2936                           postinc2	equ	0xFDE
  2937                           postdec2	equ	0xFDD
  2938                           fsr2h	equ	0xFDA
  2939                           fsr2l	equ	0xFD9
  2940                           status	equ	0xFD8
  2941                           
  2942 ;; *************** function ___ftpack *****************
  2943 ;; Defined at:
  2944 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  arg             3    0[COMRAM] unsigned um
  2947 ;;  exp             1    3[COMRAM] unsigned char 
  2948 ;;  sign            1    4[COMRAM] unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;		None
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  3    0[COMRAM] float 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, status,0
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2960 ;;      Params:         5       0       0       0       0       0       0       0       0
  2961 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2962 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2963 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2964 ;;Total ram usage:        8 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		___altoft
  2970 ;;		___ftadd
  2971 ;;		___ftdiv
  2972 ;;		___ftmul
  2973 ;;		___lwtoft
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text20
  2978  000FB8                     __ptext20:
  2979                           	opt stack 0
  2980  000FB8                     ___ftpack:
  2981                           	opt stack 26
  2982                           
  2983                           ;incstack = 0
  2984  000FB8  5004               	movf	___ftpack@exp,w,c
  2985  000FBA  B4D8               	btfsc	status,2,c
  2986  000FBC  D005               	goto	l1290
  2987  000FBE  5001               	movf	___ftpack@arg,w,c
  2988  000FC0  1002               	iorwf	___ftpack@arg+1,w,c
  2989  000FC2  1003               	iorwf	___ftpack@arg+2,w,c
  2990  000FC4  A4D8               	btfss	status,2,c
  2991  000FC6  D00C               	goto	l1296
  2992  000FC8                     l1290:
  2993  000FC8  0E00               	movlw	0
  2994  000FCA  6E01               	movwf	?___ftpack,c
  2995  000FCC  0E00               	movlw	0
  2996  000FCE  6E02               	movwf	?___ftpack+1,c
  2997  000FD0  0E00               	movlw	0
  2998  000FD2  6E03               	movwf	?___ftpack+2,c
  2999  000FD4  0012               	return	
  3000  000FD6                     l1294:
  3001  000FD6  2A04               	incf	___ftpack@exp,f,c
  3002  000FD8  90D8               	bcf	status,0,c
  3003  000FDA  3203               	rrcf	___ftpack@arg+2,f,c
  3004  000FDC  3202               	rrcf	___ftpack@arg+1,f,c
  3005  000FDE  3201               	rrcf	___ftpack@arg,f,c
  3006  000FE0                     l1296:
  3007  000FE0  0E00               	movlw	0
  3008  000FE2  1401               	andwf	___ftpack@arg,w,c
  3009  000FE4  6E06               	movwf	??___ftpack& (0+255),c
  3010  000FE6  0E00               	movlw	0
  3011  000FE8  1402               	andwf	___ftpack@arg+1,w,c
  3012  000FEA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3013  000FEC  0EFE               	movlw	254
  3014  000FEE  1403               	andwf	___ftpack@arg+2,w,c
  3015  000FF0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3016  000FF2  5006               	movf	??___ftpack,w,c
  3017  000FF4  1007               	iorwf	??___ftpack+1,w,c
  3018  000FF6  1008               	iorwf	??___ftpack+2,w,c
  3019  000FF8  B4D8               	btfsc	status,2,c
  3020  000FFA  D00C               	goto	l1302
  3021  000FFC  D7EC               	goto	l1294
  3022  000FFE                     l1298:
  3023  000FFE  2A04               	incf	___ftpack@exp,f,c
  3024  001000  0E01               	movlw	1
  3025  001002  2601               	addwf	___ftpack@arg,f,c
  3026  001004  0E00               	movlw	0
  3027  001006  2202               	addwfc	___ftpack@arg+1,f,c
  3028  001008  0E00               	movlw	0
  3029  00100A  2203               	addwfc	___ftpack@arg+2,f,c
  3030  00100C  90D8               	bcf	status,0,c
  3031  00100E  3203               	rrcf	___ftpack@arg+2,f,c
  3032  001010  3202               	rrcf	___ftpack@arg+1,f,c
  3033  001012  3201               	rrcf	___ftpack@arg,f,c
  3034  001014                     l1302:
  3035  001014  0E00               	movlw	0
  3036  001016  1401               	andwf	___ftpack@arg,w,c
  3037  001018  6E06               	movwf	??___ftpack& (0+255),c
  3038  00101A  0E00               	movlw	0
  3039  00101C  1402               	andwf	___ftpack@arg+1,w,c
  3040  00101E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3041  001020  0EFF               	movlw	255
  3042  001022  1403               	andwf	___ftpack@arg+2,w,c
  3043  001024  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3044  001026  5006               	movf	??___ftpack,w,c
  3045  001028  1007               	iorwf	??___ftpack+1,w,c
  3046  00102A  1008               	iorwf	??___ftpack+2,w,c
  3047  00102C  B4D8               	btfsc	status,2,c
  3048  00102E  D006               	goto	l1306
  3049  001030  D7E6               	goto	l1298
  3050  001032                     l1304:
  3051  001032  0604               	decf	___ftpack@exp,f,c
  3052  001034  90D8               	bcf	status,0,c
  3053  001036  3601               	rlcf	___ftpack@arg,f,c
  3054  001038  3602               	rlcf	___ftpack@arg+1,f,c
  3055  00103A  3603               	rlcf	___ftpack@arg+2,f,c
  3056  00103C                     l1306:
  3057  00103C  BE02               	btfsc	___ftpack@arg+1,7,c
  3058  00103E  D003               	goto	l335
  3059  001040  0E02               	movlw	2
  3060  001042  6004               	cpfslt	___ftpack@exp,c
  3061  001044  D7F6               	goto	l1304
  3062  001046                     l335:
  3063  001046  A004               	btfss	___ftpack@exp,0,c
  3064  001048  9E02               	bcf	___ftpack@arg+1,7,c
  3065  00104A  90D8               	bcf	status,0,c
  3066  00104C  3204               	rrcf	___ftpack@exp,f,c
  3067  00104E  5004               	movf	___ftpack@exp,w,c
  3068  001050  1203               	iorwf	___ftpack@arg+2,f,c
  3069  001052  5005               	movf	___ftpack@sign,w,c
  3070  001054  A4D8               	btfss	status,2,c
  3071  001056  8E03               	bsf	___ftpack@arg+2,7,c
  3072  001058  C001  F001         	movff	___ftpack@arg,?___ftpack
  3073  00105C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  3074  001060  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  3075  001064  0012               	return	
  3076  001066                     __end_of___ftpack:
  3077                           	opt stack 0
  3078                           tblptru	equ	0xFF8
  3079                           tblptrh	equ	0xFF7
  3080                           tblptrl	equ	0xFF6
  3081                           tablat	equ	0xFF5
  3082                           prodh	equ	0xFF4
  3083                           prodl	equ	0xFF3
  3084                           intcon	equ	0xFF2
  3085                           indf2	equ	0xFDF
  3086                           postinc2	equ	0xFDE
  3087                           postdec2	equ	0xFDD
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _Delay *****************
  3093 ;; Defined at:
  3094 ;;		line 32 in file "main.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  j               2    0[COMRAM] int 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3108 ;;      Params:         0       0       0       0       0       0       0       0       0
  3109 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3111 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3112 ;;Total ram usage:        2 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; This function calls:
  3115 ;;		Nothing
  3116 ;; This function is called by:
  3117 ;;		_adc_output
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text21
  3122  001306                     __ptext21:
  3123                           	opt stack 0
  3124  001306                     _Delay:
  3125                           	opt stack 29
  3126                           
  3127                           ;main.c: 33: int j;
  3128                           ;main.c: 34: for (j=0;j<200;j++) {}
  3129                           
  3130                           ;incstack = 0
  3131  001306  0E00               	movlw	0
  3132  001308  6E02               	movwf	Delay@j+1,c
  3133  00130A  0E00               	movlw	0
  3134  00130C  6E01               	movwf	Delay@j,c
  3135  00130E                     l1628:
  3136  00130E  BE02               	btfsc	Delay@j+1,7,c
  3137  001310  D006               	goto	l1632
  3138  001312  5002               	movf	Delay@j+1,w,c
  3139  001314  E107               	bnz	l1636
  3140  001316  0EC8               	movlw	200
  3141  001318  5C01               	subwf	Delay@j,w,c
  3142  00131A  B0D8               	btfsc	status,0,c
  3143  00131C  D003               	goto	l1636
  3144  00131E                     l1632:
  3145  00131E  4A01               	infsnz	Delay@j,f,c
  3146  001320  2A02               	incf	Delay@j+1,f,c
  3147  001322  D7F5               	goto	l1628
  3148  001324                     l1636:
  3149                           
  3150                           ;main.c: 35: j=0;
  3151  001324  0E00               	movlw	0
  3152  001326  6E02               	movwf	Delay@j+1,c
  3153  001328  0E00               	movlw	0
  3154  00132A  6E01               	movwf	Delay@j,c
  3155                           
  3156                           ;main.c: 36: j=0;
  3157  00132C  0E00               	movlw	0
  3158  00132E  6E02               	movwf	Delay@j+1,c
  3159  001330  0E00               	movlw	0
  3160  001332  6E01               	movwf	Delay@j,c
  3161  001334  0012               	return		;funcret
  3162  001336                     __end_of_Delay:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           indf2	equ	0xFDF
  3172                           postinc2	equ	0xFDE
  3173                           postdec2	equ	0xFDD
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           tblptru	equ	0xFF8
  3178                           tblptrh	equ	0xFF7
  3179                           tblptrl	equ	0xFF6
  3180                           tablat	equ	0xFF5
  3181                           prodh	equ	0xFF4
  3182                           prodl	equ	0xFF3
  3183                           intcon	equ	0xFF2
  3184                           indf2	equ	0xFDF
  3185                           postinc2	equ	0xFDE
  3186                           postdec2	equ	0xFDD
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8
  3190                           
  3191                           	psect	rparam
  3192  0000                     tblptru	equ	0xFF8
  3193                           tblptrh	equ	0xFF7
  3194                           tblptrl	equ	0xFF6
  3195                           tablat	equ	0xFF5
  3196                           prodh	equ	0xFF4
  3197                           prodl	equ	0xFF3
  3198                           intcon	equ	0xFF2
  3199                           indf2	equ	0xFDF
  3200                           postinc2	equ	0xFDE
  3201                           postdec2	equ	0xFDD
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      94
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> adc_output@va3_134(COMRAM[5]), adc_output@va4(COMRAM[5]), adc_output@va3(COMRAM[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_adc_output
    _adc_output->_fmod
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _fmod->_trunc
    _trunc->___altoft
    ___fttol->___ftdiv
    ___altoft->___fttol
    ___ftneg->___ftmul
    ___ftmul->___ftpack
    ___ftdiv->___lwtoft
    ___ftadd->___ftneg
    ___lwtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20908
                         _adc_output
                          _adc_setup
                       _serial_setup
                       _swap_channel
 ---------------------------------------------------------------------------------
 (1) _swap_channel                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serial_setup                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_setup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_output                                          24    24      0   20908
                                             68 COMRAM    24    24      0
                              _Delay
                            ___ftdiv
                            ___fttol
                            ___lwdiv
                           ___lwtoft
                             ___wmul
                               _fmod
                            _sprintf
                            _tx_data
 ---------------------------------------------------------------------------------
 (2) _tx_data                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    1566
                                             18 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             13 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _fmod                                                 9     3      6   12382
                                             59 COMRAM     9     3      6
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    3318
                                             51 COMRAM     8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     336
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     444
                                             26 COMRAM    15    11      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2311
                                             41 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                             23 COMRAM     3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2665
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2747
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3281
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2259
                                              8 COMRAM     3     0      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Delay                                                2     2      0      48
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_output
     _Delay
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___wmul (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___wmul (ARG)
     ___lwdiv
       ___wmul (ARG)
     ___lwtoft
       ___ftpack
       ___wmul (ARG)
     ___wmul
     _fmod
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___ftpack
       ___ftneg
         ___ftmul (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___wmul (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___wmul (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp
     _sprintf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
     _tx_data
   _adc_setup
   _serial_setup
   _swap_channel

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5C      5E       1       98.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5E      20        0.0%
DATA                 0      0      5E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Aug 04 17:12:40 2016

           ___altoft@exp 0032            ___altoft@sign 0033                       l47 141A  
                     l77 134E      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           ___ftadd@exp1 0026             ___ftadd@exp2 0025             ___ftadd@sign 0024  
                    l420 1398                      l335 1046                      l363 0A3A  
                    l518 12BA                      l367 0A64                      l528 12FC  
                    l378 0B14                      l387 0B30                      l398 0F86  
                    u871 0CFA                      u960 11C6                      u890 0D34  
                    u971 0A06                      u981 0A1A                      u895 0D2C  
                    u968 11C8             __CFG_LVP$OFF 000000             ___ftdiv@cntr 0015  
           ___ftdiv@sign 001A             __CFG_WDT$OFF 000000                     l1302 1014  
                   l1304 1032                     l1306 103C                     l1330 121C  
                   l1332 1228                     l1430 0AA2                     l1414 0A72  
                   l1502 0F60                     l1440 0AD8                     l1408 0A48  
                   l1344 0D16                     l1290 0FC8                     l1450 0B0C  
                   l1442 0AE0                     l1522 0E06                     l1362 0D7C  
                   l1258 13F2                     l1436 0AC4                     l1380 0DCC  
                   l1372 0DA4                     l1604 12B0                     l1620 12F2  
                   l1612 12D2                     l1700 0CC4                     l1294 0FD6  
                   l1438 0ACE                     l1542 0E60                     l1374 0DB0  
                   l1366 0D8C                     l1390 119E                     l1614 12DA  
                   l1702 0CDC                     l1632 131E                     l1296 0FE0  
                   l1456 0B4C                     l1448 0B02                     l1552 0E88  
                   l1528 0E2E                     l1376 0DB6                     l1616 12DE  
                   l1298 0FFE                     l1466 0B7C                     l1482 0F22  
                   l1546 0E70                     l1636 1324                     l1628 130E  
                   l1476 0EFA                     l1556 0E98                     l1572 112A  
                   l1660 0BF0                     l1670 0C18                     l1654 0BC6  
                   l1576 1144                     l1592 1288                     l1672 0C1C  
                   l1648 0BAC                     l1728 08E2                     l1594 1290  
                   l1690 0C64                     l1596 1294                     l1692 0C6A  
                   l1684 0C48                     l1764 097C                     l1698 0CBC  
                   l1788 134A                     STR_1 080B                     STR_2 080B  
                   STR_3 080B                     _GIEH 007F97                     u1201 0F0A  
                   u1300 1136                     u1231 0DEE                     u1251 0E16  
                   u1500 08DA                     u1181 0EE2                     _IPEN 007E87  
                   _RCIE 007CED                     _RCIP 007CFD                     _TXIF 007CF4  
           _swap_channel 13E6                     _fmod 1066                     _main 1336  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
           ___ftmul@cntr 0016             ___param_bank 000010             ___ftmul@sign 0017  
           ___fttol@exp1 0029             ___fttol@lval 0025                    ?_fmod 003C  
                  ?_main 0001                    _ADRES 000FC3          __end_of___ftadd 0BA2  
                  _BRG16 007DC3          __end_of___ftdiv 0FB8          __end_of___ftneg 13A6  
        __end_of___ftmul 0ED2          __end_of___fttol 0DDE                    _IRCF0 007E9C  
                  _IRCF1 007E9D                    _IRCF2 007E9E          __end_of___lwdiv 12C4  
        __end_of___lwmod 1306                    _RCSTA 000FAB                    _SPBRG 000FAF  
                  _TXREG 000FAD                    _TXSTA 000FAC                    _Delay 1306  
          __CFG_PWRT$OFF 000000          __end_of_dpowers 080B                    _frexp 1182  
                  _errno 005D            ___ftpack@sign 0005                    fmod@n 0042  
                  fmod@x 003C                    fmod@y 003F                    _trunc 1100  
                  tablat 000FF5          __end_of_tx_data 1420                    status 000FD8  
        __end_of_sprintf 0CEA          adc_output@valor 0048          adc_output@ponto 005B  
         __CFG_MCLRE$OFF 000000          __initialization 13F8             __end_of_fmod 1100  
           __end_of_main 135C                   ??_fmod 0042                   ??_main 005D  
          ___fttol@sign1 0024            __activetblptr 000002                   ?_Delay 0001  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 ?_frexp 0001         __end_of___altoft 1272         __end_of___ftpack 1066  
                 ?_trunc 0034                   Delay@j 0001         __end_of___lwtoft 13CA  
                 ___wmul 135C                ??___ftadd 0021           __CFG_STVREN$ON 000000  
              ??___ftdiv 0012                ??___ftneg 001B                ??___ftmul 000F  
              ??___fttol 001F                ??___lwdiv 000B                ??___lwmod 0012  
  ___ftmul@f3_as_product 0013             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_tx_data 0001  
              ??_sprintf 0019                   trunc@i 0037                   trunc@x 0034  
       adc_output@tensao 004A               __accesstop 0060  __end_of__initialization 13FC  
             ___altoft@c 002A          __CFG_PBADEN$OFF 000000               ___ftadd@f1 001B  
             ___ftadd@f2 001E            ___rparam_used 000001       __size_of_adc_setup 000E  
             ___ftdiv@f1 000C               ___ftdiv@f2 000F               ___ftdiv@f3 0016  
             ___ftneg@f1 0018            __end_of_Delay 1336               ___ftmul@f1 0009  
             ___ftmul@f2 000C               ___fttol@f1 001B           __pcstackCOMRAM 0001  
          __end_of_frexp 11FA            __end_of_trunc 1182               _adc_output 0810  
             ___lwtoft@c 0009                  ??_Delay 0001                  ??_frexp 0006  
                ??_trunc 0037                  ?___wmul 0001                ?___altoft 002A  
              ?___ftpack 0001                ?___lwtoft 0009        __end_of_adc_setup 1414  
                _GO_DONE 007E11                  __Hparam 0000                  __Lparam 0000  
          ?_serial_setup 0001                  ___ftadd 09F6                  ___ftdiv 0ED2  
                ___ftneg 1382          __size_of___wmul 0026                  ___ftmul 0DDE  
                ___fttol 0CEA                  ___lwdiv 1272                  ___lwmod 12C4  
           __psmallconst 0800               ??___altoft 002E              ?_adc_output 0001  
                __pcinit 13F8               ??___ftpack 0006                  __ramtop 0800  
                __ptext0 1336                  __ptext1 13E6                  __ptext2 13CA  
                __ptext3 1406                  __ptext4 0810                  __ptext5 1414  
                __ptext6 0BA2                  __ptext7 12C4                  __ptext8 1272  
                __ptext9 1066               ??___lwtoft 000C                  _dpowers 0801  
                _tx_data 1414                  _sprintf 0BA2     end_of_initialization 13FC  
          __Lmediumconst 0000           ??_serial_setup 0001        adc_output@va3_134 0056  
                postdec2 000FDD                  postinc2 000FDE                _TRISAbits 000F92  
              _TRISCbits 000F94           _adc_output$764 0045      __size_of_adc_output 01E6  
            ___ftdiv@exp 0019              ___ftmul@exp 0012           __end_of___wmul 1382  
    start_initialization 13F8            ?_swap_channel 0001               frexp@value 0001  
               ??___wmul 0005              tx_data@data 0001         __CFG_LPT1OSC$OFF 000000  
      __size_of___altoft 0078        __size_of___ftpack 00AE              __pbssCOMRAM 005D  
      __size_of___lwtoft 0024     __end_of_serial_setup 13E6                _adc_setup 1406  
         ??_swap_channel 0001              sprintf@flag 001C              sprintf@prec 001D  
       ___lwdiv@dividend 0007                 ?___ftadd 001B                 ?___ftdiv 000C  
               ?___ftneg 0018                 ?___ftmul 0009                 ?___fttol 001B  
               ?___lwdiv 0007                 ?___lwmod 000E             ??_adc_output 0045  
            __smallconst 0800           __size_of_Delay 0030         ___lwdiv@quotient 000B  
               ?_tx_data 0001               ?_adc_setup 0001                 ?_sprintf 0013  
         __size_of_frexp 0078           __size_of_trunc 0082           ___wmul@product 0005  
     __end_of_adc_output 09F6         __CFG_WDTPS$32768 000000        ___wmul@multiplier 0001  
          adc_output@va3 004C            adc_output@va4 0051                frexp@eptr 0004  
               __Hrparam 0000                 __Lrparam 0000         __size_of___ftadd 01AC  
       __size_of___ftdiv 00E6         __size_of___ftneg 0024                 ___altoft 11FA  
       __size_of___ftmul 00F4         __size_of___fttol 00F4         __size_of___lwdiv 0052  
   __end_of_swap_channel 13F8         __size_of___lwmod 0042                 ___ftpack 0FB8  
               ___lwtoft 13A6    __size_of_serial_setup 001C               sprintf@val 001E  
        ___lwdiv@divisor 0009          ___lwdiv@counter 000D                 __ptext10 1100  
               __ptext11 1182                 __ptext20 0FB8                 __ptext12 0CEA  
               __ptext21 1306                 __ptext13 11FA                 __ptext14 1382  
               __ptext15 0DDE                 __ptext16 0ED2                 __ptext17 09F6  
               __ptext18 135C                 __ptext19 13A6              ??_adc_setup 0001  
       __size_of_tx_data 000C         __size_of_sprintf 0148               trunc@expon 003A  
          __size_of_fmod 009A            __size_of_main 0026             _serial_setup 13CA  
              sprintf@ap 001A                sprintf@sp 0013         ___lwmod@dividend 000E  
    __CFG_FOSC$INTOSC_EC 000000                 sprintf@c 0020                 sprintf@f 0015  
        ___lwmod@divisor 0010          ___lwmod@counter 0012    __size_of_swap_channel 0012  
